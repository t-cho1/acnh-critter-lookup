{"version":3,"sources":["search-input-context.tsx","SearchInput.tsx","types.ts","list-view-context.tsx","locations-context.tsx","sort-field-context.tsx","Views.tsx","Locations.tsx","helpers.ts","time-context.tsx","Time.tsx","hemispheres-context.tsx","Hemispheres.tsx","months-context.tsx","Months.tsx","SortFields.tsx","Creatures.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchInputContext","createContext","searchInput","setSearchInput","SearchInputContextProvider","children","useState","Provider","value","ListView","SortField","BugLocation","FishLocation","Hemisphere","SearchInputContainer","styled","div","SearchInput","useContext","type","onChange","event","target","Rarity","Month","ListViewContext","listView","Bugs","setListView","ListViewContextProvider","LocationsContext","location","None","setLocation","LocationsContextProvider","SortFieldContext","sortField","setSortField","SortFieldContextProvider","ViewsContainer","Views","changeListView","checked","Fish","Container","Locations","locations","Object","values","map","key","convertCreatureJsonToInterface","creatureJson","id","name","price","availability","rarity","time","isAllDay","monthNorthern","monthSouthern","isAllYear","originalBugs","bugs","originalFish","fish","originalCreatureMap","freeze","compareString","a","b","toLowerCase","convertNumberToTime","n","suffix","getAllTimeString","hours","i","push","hour","getMonthRanges","months","ranges","start","length","prevMonth","currMonth","TimeContext","allDay","startTime","endTime","setAllDay","setStartTime","setEndTime","TimeContextProvider","AllDay","span","Time","parseInt","disabled","timeString","index","slice","HemispheresContext","hemisphere","North","setHemisphere","HemispheresContextProvider","Hemispheres","South","MonthsContext","allYear","startMonth","endMonth","setAllYear","setStartMonth","setEndMonth","MonthsContextProvider","AllYear","Months","month","SortFields","CreatureName","h2","CreatureCard","Label","Creatures","creatures","filter","creature","j","m","isSubsequence","filterBySearchInput","filterByLocation","filterByAllDay","timeSet","Set","has","filterByTime","filterByAllYear","monthSet","filterByMonth","sort","NameAZ","NameZA","PriceLowHigh","PriceHighLow","RarityLessMore","RarityMoreLess","sortBySortField","join","getTimeDisplay","AppContainer","Top","Filters","Content","Bottom","BottomFiltersLabel","p","BottomFilters","BottomItems","App","window","innerWidth","isSmallViewport","setIsSmallViewport","isBottomFiltersOpen","setIsBottomFiltersOpen","handleResize","console","log","useEffect","addEventListener","removeEventListener","onClick","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28343f88.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\n\ntype SearchInputContextType = {\n  searchInput: string\n  setSearchInput: (searchInput: string) => void\n}\n\nexport const SearchInputContext = createContext<SearchInputContextType>({\n  searchInput: '',\n  setSearchInput: () => {},\n})\n\nexport const SearchInputContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [searchInput, setSearchInput] = useState('')\n\n  return (\n    <SearchInputContext.Provider value={{ searchInput, setSearchInput }}>\n      {children}\n    </SearchInputContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport { SearchInputContext } from './search-input-context'\n\nconst SearchInputContainer = styled.div`\n  display: flex;\n  white-space: pre;\n  /* margin-right: 24px; */\n  height: 24px;\n`\n\nexport default function SearchInput() {\n  const { searchInput, setSearchInput } = useContext(SearchInputContext)\n\n  return (\n    <SearchInputContainer>\n      <span>Search: </span>\n      <input\n        type=\"text\"\n        value={searchInput}\n        onChange={(event) => setSearchInput(event.target.value as string)}\n      />\n    </SearchInputContainer>\n  )\n}\n","export enum ListView {\n  Bugs = 'bugs',\n  Fish = 'fish',\n}\n\nexport enum SortField {\n  None = 'None',\n  NameAZ = 'Name (A - Z)',\n  NameZA = 'Name (Z - A)',\n  PriceLowHigh = 'Price (Low - High)',\n  PriceHighLow = 'Price (High - Low)',\n  RarityLessMore = 'Rarity (Less - More)',\n  RarityMoreLess = 'Rarity (More - Less)',\n}\n\nexport enum BugLocation {\n  None = 'None',\n  Flying = 'Flying',\n  FlyingHybridFlowers = 'Flying near hybrid flowers',\n  FlyingLight = 'Flying by light',\n  Trees = 'On trees',\n  Ground = 'On the ground',\n  Flowers = 'On flowers',\n  WhiteFlowers = 'On white flowers',\n  ShakingTrees = 'Shaking trees',\n  Underground = 'Underground',\n  PondsAndRivers = 'On ponds and rivers',\n  TreeStumps = 'On tree stumps',\n  PalmTrees = 'On palm trees',\n  UnderTrees = 'Under trees',\n  RottenFood = 'On rotten food',\n  Beach = 'On the beach',\n  BeachRocks = 'On beach rocks',\n  Trash = 'Near trash',\n  Villagers = 'On villagers',\n  RocksRain = 'On rocks (when raining)',\n  HittingRocks = 'Hitting rocks',\n  Empty = '',\n}\n\nexport enum FishLocation {\n  None = 'None',\n  River = 'River',\n  Pond = 'Pond',\n  RiverClifftop = 'River (Clifftop)',\n  RiverClifftopAndPond = 'River (Clifftop) & Pond',\n  RiverMouth = 'River (Mouth)',\n  Sea = 'Sea',\n  Pier = 'Pier',\n  SeaWhenRainingOrSnowing = 'Sea (when raining or snowing)',\n}\n\nexport enum Hemisphere {\n  North = 'Northern',\n  South = 'Southern',\n}\n\nexport const Month = [\n  '--',\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n]\n\nexport enum Rarity {\n  Common = 1,\n  Uncommon,\n  Rare,\n  'Ultra-rare',\n}\n\nexport type Location = BugLocation | FishLocation\n\ninterface Availability {\n  readonly location: Location\n  readonly rarity: Rarity\n  readonly time: number[] // starts at 0\n  readonly isAllDay: boolean\n  readonly monthNorthern: number[] // starts at 1\n  readonly monthSouthern: number[] // starts at 1\n  readonly isAllYear: boolean\n}\n\nexport interface ICreature {\n  readonly id: number\n  readonly name: string\n  readonly price: number\n  readonly availability: Availability\n}\n","import React, { createContext, useState } from 'react'\n\nimport { ListView } from './types'\n\ntype ListViewContextType = {\n  listView: ListView\n  setListView: (listView: ListView) => void\n}\n\nexport const ListViewContext = createContext<ListViewContextType>({\n  listView: ListView.Bugs,\n  setListView: () => {},\n})\n\nexport const ListViewContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [listView, setListView] = useState(ListView.Bugs)\n\n  return (\n    <ListViewContext.Provider value={{ listView, setListView }}>\n      {children}\n    </ListViewContext.Provider>\n  )\n}\n","import React, { createContext, useContext, useState } from 'react'\n\nimport { Location, BugLocation, FishLocation, ListView } from './types'\nimport { ListViewContext } from './list-view-context'\n\ntype LocationsContextType = {\n  location: Location\n  setLocation: (location: Location) => void\n}\n\nexport const LocationsContext = createContext<LocationsContextType>({\n  location: BugLocation.None,\n  setLocation: () => {},\n})\n\nexport const LocationsContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const { listView } = useContext(ListViewContext)\n  const [location, setLocation] = useState(\n    listView === ListView.Bugs ? BugLocation.None : FishLocation.None\n  )\n\n  return (\n    <LocationsContext.Provider value={{ location, setLocation }}>\n      {children}\n    </LocationsContext.Provider>\n  )\n}\n","import React, { createContext, useState } from 'react'\n\nimport { SortField } from './types'\n\ntype SortFieldContextType = {\n  sortField: SortField\n  setSortField: (sortField: SortField) => void\n}\n\nexport const SortFieldContext = createContext<SortFieldContextType>({\n  sortField: SortField.None,\n  setSortField: () => {},\n})\n\nexport const SortFieldContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [sortField, setSortField] = useState(SortField.None)\n\n  return (\n    <SortFieldContext.Provider value={{ sortField, setSortField }}>\n      {children}\n    </SortFieldContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport { ListView, BugLocation, FishLocation, SortField } from './types'\nimport { ListViewContext } from './list-view-context'\nimport { SearchInputContext } from './search-input-context'\nimport { LocationsContext } from './locations-context'\nimport { SortFieldContext } from './sort-field-context'\n\nconst ViewsContainer = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport default function Views() {\n  const { listView, setListView } = useContext(ListViewContext)\n  const { setSearchInput } = useContext(SearchInputContext)\n  const { setLocation } = useContext(LocationsContext)\n  const { setSortField } = useContext(SortFieldContext)\n\n  // TODO: extract this logic\n  const changeListView = (listView: ListView) => {\n    setListView(listView)\n    setSearchInput('')\n    setLocation(listView === ListView.Bugs ? BugLocation.None : FishLocation.None)\n    setSortField(SortField.None)\n  }\n\n  return (\n    <ViewsContainer>\n      <span>View: </span>\n      <div>\n        <input\n          type=\"radio\"\n          onChange={(event) => changeListView(event.target.value as ListView)}\n          value={ListView.Bugs}\n          checked={listView === ListView.Bugs}\n        />\n        <label>Bugs</label>\n      </div>\n      <div>\n        <input\n          type=\"radio\"\n          onChange={(event) => changeListView(event.target.value as ListView)}\n          value={ListView.Fish}\n          checked={listView === ListView.Fish}\n        />\n        <label>Fish</label>\n      </div>\n    </ViewsContainer>\n  )\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport { BugLocation, FishLocation, ListView, Location } from './types'\nimport { LocationsContext } from './locations-context'\nimport { ListViewContext } from './list-view-context'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nexport default function Locations() {\n  const { listView } = useContext(ListViewContext)\n  const { location, setLocation } = useContext(LocationsContext)\n\n  const locations: Location[] =\n    listView === ListView.Bugs ? Object.values(BugLocation) : Object.values(FishLocation)\n\n  return (\n    <Container>\n      <span>Location: </span>\n      <select value={location} onChange={(event) => setLocation(event.target.value as Location)}>\n        {locations.map((location: Location) => (\n          <option key={location}>{location}</option>\n        ))}\n      </select>\n    </Container>\n  )\n}\n","import bugs from './bugs.json'\nimport fish from './fish.json'\n\nimport {\n  ListView,\n  SortField,\n  BugLocation,\n  FishLocation,\n  Location,\n  Month,\n  Rarity,\n  ICreature,\n  Hemisphere,\n} from './types'\n\nconst convertCreatureJsonToInterface = (creatureJson: any) =>\n  Object.values(creatureJson).map(({ id, name, price, availability }: any) => ({\n    id,\n    name: name['name-USen'],\n    price,\n    availability: {\n      location: availability.location,\n      rarity: availability.rarity,\n      time: availability['time-array'],\n      isAllDay: availability.isAllDay,\n      monthNorthern: availability['month-array-northern'],\n      monthSouthern: availability['month-array-southern'],\n      isAllYear: availability.isAllYear,\n    },\n  }))\n\nexport const originalBugs: ICreature[] = convertCreatureJsonToInterface(bugs)\nexport const originalFish: ICreature[] = convertCreatureJsonToInterface(fish)\nexport const originalCreatureMap = Object.freeze({\n  [ListView.Bugs]: originalBugs,\n  [ListView.Fish]: originalFish,\n})\n\nexport const compareString = (a: string, b: string): number =>\n  a.toLowerCase() > b.toLowerCase() ? 1 : -1\n\n/**\n * Find if b is a subsequence of a\n * eg. isSubsequence('abcde', 'ace') => true, isSubsequence('abcde', 'abf') => false\n */\nexport const isSubsequence = (a: string, b: string): boolean => {\n  let j = 0\n  let [n, m] = [a.length, b.length]\n  for (let i = 0; i < n && j < m; i++) {\n    if (a[i] === b[j]) {\n      j++\n    }\n  }\n  return j === m\n}\n\n/**\n * Convert number to time of day\n * eg. convertNumberToTime(5) => '5am', convertNumberToTime(18) => '6pm\n */\nexport const convertNumberToTime = (n: number): string => {\n  // special cases\n  if (n === 0) {\n    return '12am'\n  }\n  if (n === 12) {\n    return '12pm'\n  }\n  const suffix = n < 12 ? 'am' : 'pm'\n  return `${n % 12}${suffix}`\n}\n\nexport const getAllTimeString = (): string[] => {\n  const hours = []\n  for (let i = 0; i < 24; i++) {\n    hours.push(i)\n  }\n  return hours.map((hour: number) => convertNumberToTime(hour))\n}\n\nexport const getMonthRanges = (months: number[]): string[] => {\n  const ranges = []\n  let start = months[0]\n  for (let i = 1; i < months.length; i++) {\n    const prevMonth = months[i - 1]\n    const currMonth = months[i]\n    if (currMonth !== prevMonth + 1 && prevMonth !== 12 && currMonth && 1) {\n      ranges.push(`${Month[start]} - ${Month[prevMonth]}`)\n      start = currMonth\n    }\n  }\n  return [...ranges, `${Month[start]} - ${Month[months[months.length - 1]]}`]\n}\n\nexport const sortBySortField = (sortField: SortField) => (a: ICreature, b: ICreature) => {\n  switch (sortField) {\n    case SortField.None:\n      return a.id - b.id\n\n    case SortField.NameAZ:\n      return compareString(a.name, b.name)\n\n    case SortField.NameZA:\n      return compareString(b.name, a.name)\n\n    case SortField.PriceLowHigh:\n      return a.price - b.price\n\n    case SortField.PriceHighLow:\n      return b.price - a.price\n\n    case SortField.RarityLessMore:\n      return (Rarity as any)[a.availability.rarity] - (Rarity as any)[b.availability.rarity]\n\n    case SortField.RarityMoreLess:\n      return (Rarity as any)[b.availability.rarity] - (Rarity as any)[a.availability.rarity]\n  }\n}\n\nexport const filterBySearchInput = (searchInput: string) => (creature: ICreature) =>\n  isSubsequence(creature.name.toLowerCase(), searchInput.toLowerCase())\n\nexport const filterByLocation = (location: Location) => (creature: ICreature) => {\n  if (location === BugLocation.None || location === FishLocation.None) {\n    return true\n  }\n  return creature.availability.location === location\n}\n\nexport const filterByAllDay = (allDay: boolean) => (creature: ICreature) =>\n  creature.availability.isAllDay === allDay\n\nexport const filterByTime = (startTime: number, endTime: number) => (creature: ICreature) => {\n  if (endTime === -1) {\n    return true\n  }\n  const timeSet = new Set(creature.availability.time)\n  return timeSet.has(startTime) && timeSet.has(endTime)\n}\n\nexport const filterByAllYear = (allYear: boolean) => (creature: ICreature) =>\n  creature.availability.isAllYear === allYear\n\nexport const filterByMonth = (hemisphere: Hemisphere, startMonth: number, endMonth: number) => (\n  creature: ICreature\n) => {\n  if (startMonth === 0 || endMonth === 0) {\n    return true\n  }\n  const {\n    availability: { monthNorthern, monthSouthern },\n  } = creature\n  const monthSet = new Set(hemisphere === Hemisphere.North ? monthNorthern : monthSouthern)\n  return monthSet.has(startMonth) && monthSet.has(endMonth)\n}\n","import React, { createContext, useState } from 'react'\n\ntype TimeContextType = {\n  allDay: boolean\n  startTime: number\n  endTime: number\n  setAllDay: (allDay: boolean) => void\n  setStartTime: (startTime: number) => void\n  setEndTime: (endTime: number) => void\n}\n\nexport const TimeContext = createContext<TimeContextType>({\n  allDay: false,\n  startTime: -1,\n  endTime: -1,\n  setAllDay: () => {},\n  setStartTime: () => {},\n  setEndTime: () => {},\n})\n\nexport const TimeContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [allDay, setAllDay] = useState(false)\n  const [startTime, setStartTime] = useState(-1)\n  const [endTime, setEndTime] = useState(-1)\n\n  return (\n    <TimeContext.Provider\n      value={{ allDay, startTime, endTime, setAllDay, setStartTime, setEndTime }}\n    >\n      {children}\n    </TimeContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport { getAllTimeString } from './helpers'\nimport { TimeContext } from './time-context'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-self: center;\n\n  @media (max-width: 600px) {\n    justify-self: unset;\n  }\n`\n\nconst AllDay = styled.span`\n  margin-right: 8px;\n`\n\nexport default function Time() {\n  const { allDay, startTime, endTime, setAllDay, setStartTime, setEndTime } = useContext(\n    TimeContext\n  )\n\n  const handleAllDayCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { checked } = event.target\n    if (checked) {\n      setStartTime(-1)\n      setEndTime(-1)\n    }\n    setAllDay(checked)\n  }\n\n  const handleStartTimeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    const startTime = parseInt(value)\n    if (startTime > -1) {\n      setStartTime(startTime)\n    } else {\n      setStartTime(-1)\n    }\n    setEndTime(-1)\n  }\n\n  return (\n    <Container>\n      <span>Time: </span>\n      <span>\n        <input type=\"checkbox\" onChange={handleAllDayCheckboxChange} />\n        <AllDay>All Day</AllDay>\n      </span>\n      <span>\n        <select\n          value={startTime > -1 ? startTime : '--'}\n          onChange={handleStartTimeChange}\n          disabled={allDay}\n        >\n          {['--', ...getAllTimeString()].map((timeString, index) => (\n            <option key={timeString} value={index - 1}>\n              {timeString}\n            </option>\n          ))}\n        </select>\n        <span> - </span>\n        <select\n          value={endTime > -1 ? endTime : '--'}\n          onChange={(event) => setEndTime(parseInt(event.target.value))}\n          disabled={startTime === -1}\n        >\n          {['--', ...getAllTimeString().slice(startTime as number)].map((timeString, index) => (\n            <option key={timeString} value={index - 1}>\n              {timeString}\n            </option>\n          ))}\n        </select>\n      </span>\n    </Container>\n  )\n}\n","import React, { createContext, useState } from 'react'\n\nimport { Hemisphere } from './types'\n\ntype HemispheresContextType = {\n  hemisphere: Hemisphere\n  setHemisphere: (hemisphere: Hemisphere) => void\n}\n\nexport const HemispheresContext = createContext<HemispheresContextType>({\n  hemisphere: Hemisphere.North,\n  setHemisphere: () => {},\n})\n\nexport const HemispheresContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [hemisphere, setHemisphere] = useState(Hemisphere.North)\n\n  return (\n    <HemispheresContext.Provider\n      value={{\n        hemisphere,\n        setHemisphere,\n      }}\n    >\n      {children}\n    </HemispheresContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport { Hemisphere } from './types'\nimport { HemispheresContext } from './hemispheres-context'\n\nconst Container = styled.div`\n  justify-self: center;\n\n  @media (max-width: 600px) {\n    justify-self: unset;\n  }\n`\n\nexport default function Hemispheres() {\n  const { hemisphere, setHemisphere } = useContext(HemispheresContext)\n\n  return (\n    <Container>\n      <span>Hemisphere:</span>\n      <div>\n        <div>\n          <input\n            type=\"radio\"\n            onChange={() => setHemisphere(Hemisphere.North)}\n            value={Hemisphere.North}\n            checked={hemisphere === Hemisphere.North}\n          />\n          <label>Northern</label>\n        </div>\n        <div>\n          <input\n            type=\"radio\"\n            onChange={() => setHemisphere(Hemisphere.South)}\n            value={Hemisphere.South}\n            checked={hemisphere === Hemisphere.South}\n          />\n          <label>Southern</label>\n        </div>\n      </div>\n    </Container>\n  )\n}\n","import React, { createContext, useState } from 'react'\n\ntype MonthsContextType = {\n  allYear: boolean\n  startMonth: number\n  endMonth: number\n  setAllYear: (allYear: boolean) => void\n  setStartMonth: (startMonth: number) => void\n  setEndMonth: (endMonth: number) => void\n}\n\nexport const MonthsContext = createContext<MonthsContextType>({\n  allYear: false,\n  startMonth: 0,\n  endMonth: 0,\n  setAllYear: () => {},\n  setStartMonth: () => {},\n  setEndMonth: () => {},\n})\n\nexport const MonthsContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [allYear, setAllYear] = useState(false)\n  const [startMonth, setStartMonth] = useState(0)\n  const [endMonth, setEndMonth] = useState(0)\n\n  return (\n    <MonthsContext.Provider\n      value={{\n        allYear,\n        startMonth,\n        endMonth,\n        setAllYear,\n        setStartMonth,\n        setEndMonth,\n      }}\n    >\n      {children}\n    </MonthsContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport { Month } from './types'\nimport { MonthsContext } from './months-context'\n\nconst Container = styled.div`\n  justify-self: end;\n\n  @media (max-width: 600px) {\n    justify-self: unset;\n  }\n`\n\nconst AllYear = styled.span`\n  margin-right: 8px;\n`\n\nexport default function Months() {\n  const { allYear, startMonth, endMonth, setAllYear, setStartMonth, setEndMonth } = useContext(\n    MonthsContext\n  )\n\n  const handleAllYearCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { checked } = event.target\n    if (checked) {\n      setStartMonth(0)\n      setEndMonth(0)\n    }\n    setAllYear(checked)\n  }\n\n  const handleStartMonthChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    const startMonth = parseInt(value)\n    if (startMonth > 0) {\n      setStartMonth(startMonth)\n    } else {\n      setStartMonth(0)\n    }\n    setEndMonth(0)\n  }\n\n  return (\n    <Container>\n      <div>\n        <span>Months: </span>\n        <div>\n          <div>\n            <span>\n              <input type=\"checkbox\" onChange={handleAllYearCheckboxChange} />\n              <AllYear>All Year</AllYear>\n            </span>\n          </div>\n          <div>\n            <select value={startMonth || ''} onChange={handleStartMonthChange} disabled={allYear}>\n              {Month.map((month, index) => (\n                <option key={month} value={index}>\n                  {month}\n                </option>\n              ))}\n            </select>\n            <span> - </span>\n            <select\n              value={endMonth || ''}\n              onChange={(event) => setEndMonth(parseInt(event.target.value))}\n              disabled={!startMonth}\n            >\n              {Month.slice(startMonth).map((month, index) => (\n                <option key={month} value={index}>\n                  {month}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n    </Container>\n  )\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport { SortField } from './types'\nimport { SortFieldContext } from './sort-field-context'\n\nconst Container = styled.div`\n  justify-self: end;\n`\n\nexport default function SortFields() {\n  const { sortField, setSortField } = useContext(SortFieldContext)\n\n  return (\n    <Container>\n      <span>Sort: </span>\n      <select value={sortField} onChange={(event) => setSortField(event.target.value as SortField)}>\n        {Object.values(SortField).map((sortField) => (\n          <option key={sortField}>{sortField}</option>\n        ))}\n      </select>\n    </Container>\n  )\n}\n","import React, { useContext } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport {\n  originalCreatureMap,\n  convertNumberToTime,\n  getMonthRanges,\n  sortBySortField,\n  filterByLocation,\n  filterByAllDay,\n  filterByTime,\n  filterByAllYear,\n  filterByMonth,\n  filterBySearchInput,\n} from './helpers'\nimport { SearchInputContext } from './search-input-context'\nimport { ListViewContext } from './list-view-context'\nimport { LocationsContext } from './locations-context'\nimport { TimeContext } from './time-context'\nimport { HemispheresContext } from './hemispheres-context'\nimport { MonthsContext } from './months-context'\nimport { SortFieldContext } from './sort-field-context'\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  row-gap: 24px;\n  column-gap: 12px;\n\n  @media (max-width: 850px) {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media (max-width: 600px) {\n    grid-template-columns: 1fr;\n  }\n`\n\nconst CreatureName = styled.h2`\n  margin: 0 0 8px;\n  text-transform: capitalize;\n  text-decoration: underline;\n`\n\nconst CreatureCard = styled.div`\n  border: 1px solid;\n  /* margin-bottom: 16px; */\n  padding: 8px;\n  border-radius: 2px;\n  /* box-shadow: 1px 1px #888; */\n`\n\nconst Label = styled.span`\n  font-weight: bold;\n`\n\nfunction getTimeDisplay(time: number[]): string {\n  const startTime = convertNumberToTime(time[0])\n  const endTime = convertNumberToTime(time[time.length - 1])\n  return `${startTime} - ${endTime}`\n}\n\nexport default function Creatures() {\n  const { searchInput } = useContext(SearchInputContext)\n  const { listView } = useContext(ListViewContext)\n  const { location } = useContext(LocationsContext)\n  const { allDay, startTime, endTime } = useContext(TimeContext)\n  const { hemisphere } = useContext(HemispheresContext)\n  const { allYear, startMonth, endMonth } = useContext(MonthsContext)\n  const { sortField } = useContext(SortFieldContext)\n\n  const creatures = originalCreatureMap[listView]\n    .filter(filterBySearchInput(searchInput))\n    .filter(filterByLocation(location))\n    .filter(allDay ? filterByAllDay(allDay) : filterByTime(startTime, endTime))\n    .filter(allYear ? filterByAllYear(allYear) : filterByMonth(hemisphere, startMonth, endMonth))\n    .sort(sortBySortField(sortField))\n\n  return (\n    <Container>\n      {creatures.map(\n        ({\n          id,\n          availability: {\n            isAllDay,\n            isAllYear,\n            location,\n            monthNorthern,\n            monthSouthern,\n            rarity,\n            time,\n          },\n          name,\n          price,\n        }) => (\n          <CreatureCard key={id}>\n            <CreatureName>{name}</CreatureName>\n            <div>\n              <div>\n                <Label>Price: </Label>\n                <span>{price}</span>\n              </div>\n              <div>\n                <Label>Location: </Label>\n                <span>{location}</span>\n              </div>\n              <div>\n                <Label>Months (Northern Hemisphere): </Label>\n                <span>{isAllYear ? 'All year' : getMonthRanges(monthNorthern).join(', ')}</span>\n              </div>\n              <div>\n                <Label>Months (Southern Hemisphere): </Label>\n                <span>{isAllYear ? 'All year' : getMonthRanges(monthSouthern).join(', ')}</span>\n              </div>\n              <div>\n                <Label>Time: </Label>\n                <span>{isAllDay ? 'All day' : getTimeDisplay(time)}</span>\n              </div>\n              <div>\n                <Label>Rarity: </Label>\n                {/** TODO: fix ultra-rare (it shows up as Ultra-rare) */}\n                <span>{rarity}</span>\n              </div>\n            </div>\n          </CreatureCard>\n        )\n      )}\n    </Container>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport SearchInput from './SearchInput'\nimport Views from './Views'\nimport Locations from './Locations'\nimport Time from './Time'\nimport Hemispheres from './Hemispheres'\nimport Months from './Months'\nimport SortFields from './SortFields'\nimport Creatures from './Creatures'\n\nimport './App.css'\n\nconst AppContainer = styled.div`\n  width: 100%;\n  height: calc(100% - 48px);\n  padding: 2vh 4vw;\n  display: grid;\n  grid-template-rows: 24px auto auto;\n  /* grid-template-columns: 10% 90%; */\n  /* grid-template-areas:\n    '. top'\n    'left content'; */\n  grid-template-areas:\n    'top'\n    'filters'\n    'content';\n  row-gap: 24px;\n  column-gap: 24px;\n  overflow: hidden;\n  /* max-width: max(70vw, 800px); */\n  /* display: flex;\n  flex-direction: column;\n  align-items: center; */\n\n  > * {\n    max-width: 100%;\n  }\n\n  @media (max-width: 600px) {\n    display: flex;\n    flex-direction: column;\n    position: relative;\n  }\n`\n\nconst Top = styled.div`\n  grid-area: top;\n  /* display: flex;\n  justify-content: space-between; */\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  column-gap: 24px;\n\n  @media (max-width: 600px) {\n    display: unset;\n  }\n`\n\nconst TopLeft = styled.div`\n  display: flex;\n`\n\nconst Left = styled.div`\n  grid-area: left;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Filters = styled.div`\n  /* > * {\n    margin-bottom: 48px;\n  } */\n  grid-area: filters;\n  /* display: flex;\n  justify-content: space-between; */\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  column-gap: 24px;\n\n  @media (max-width: 600px) {\n    /* grid-template-rows: 1fr 1fr;\n    grid-template-columns: 1fr 1fr; */\n    display: unset;\n  }\n`\n\nconst Content = styled.div`\n  grid-area: content;\n  overflow: auto;\n\n  @media (max-width: 600px) {\n    height: calc(100% - 56px);\n  }\n`\n\nconst Bottom = styled.div`\n  position: absolute;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-top: 1px dashed;\n`\n\nconst BottomFiltersLabel = styled.p`\n  margin: 0;\n  font-weight: bold;\n  padding-top: 8px;\n`\n\nconst BottomFilters = styled.div`\n  position: absolute;\n  padding: 8px;\n  bottom: 60px;\n  left: 8px;\n  right: 8px;\n  background: white;\n  border: 1px dashed black;\n  border-radius: 2px;\n\n  > * {\n    margin-bottom: 8px;\n  }\n`\n\nconst BottomItems = styled.div`\n  display: flex;\n`\n\nexport default function App() {\n  const [isSmallViewport, setIsSmallViewport] = useState(window.innerWidth <= 600)\n  const [isBottomFiltersOpen, setIsBottomFiltersOpen] = useState(false)\n\n  const handleResize = () => {\n    console.log(window.innerWidth)\n    setIsSmallViewport(window.innerWidth <= 600)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize)\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  })\n\n  return (\n    <AppContainer>\n      {!isSmallViewport && (\n        <>\n          <Top>\n            {/* <TopLeft> */}\n            <SearchInput />\n            <Views />\n            {/* </TopLeft> */}\n            {/* <div> */}\n            <SortFields />\n            {/* </div> */}\n          </Top>\n          {/* <Left> */}\n          <Filters>\n            <Locations />\n            <Time />\n            <Hemispheres />\n            <Months />\n          </Filters>\n          {/* </Left> */}\n        </>\n      )}\n      <Content>\n        <Creatures />\n      </Content>\n      {isSmallViewport && (\n        <Bottom>\n          <BottomFiltersLabel onClick={() => setIsBottomFiltersOpen(!isBottomFiltersOpen)}>\n            {isBottomFiltersOpen ? 'v Filters v' : '^ Filters ^'}\n          </BottomFiltersLabel>\n          <BottomItems>\n            <SearchInput />\n            <Views />\n            <SortFields />\n          </BottomItems>\n        </Bottom>\n      )}\n      {isBottomFiltersOpen && (\n        <BottomFilters>\n          <Locations />\n          <Time />\n          <Hemispheres />\n          <Months />\n        </BottomFilters>\n      )}\n    </AppContainer>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { SearchInputContextProvider } from './search-input-context'\nimport { ListViewContextProvider } from './list-view-context'\nimport { LocationsContextProvider } from './locations-context'\nimport { TimeContextProvider } from './time-context'\nimport { HemispheresContextProvider } from './hemispheres-context'\nimport { MonthsContextProvider } from './months-context'\nimport { SortFieldContextProvider } from './sort-field-context'\n\nReactDOM.render(\n  <React.StrictMode>\n    <SearchInputContextProvider>\n      <LocationsContextProvider>\n        <TimeContextProvider>\n          <HemispheresContextProvider>\n            <MonthsContextProvider>\n              <SortFieldContextProvider>\n                <ListViewContextProvider>\n                  <App />\n                </ListViewContextProvider>\n              </SortFieldContextProvider>\n            </MonthsContextProvider>\n          </HemispheresContextProvider>\n        </TimeContextProvider>\n      </LocationsContextProvider>\n    </SearchInputContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}