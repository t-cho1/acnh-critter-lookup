{"version":3,"sources":["types.ts","helpers.ts","SearchInput.tsx","Views.tsx","Locations.tsx","Time.tsx","Months.tsx","SortFields.tsx","Creatures.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ListView","SortField","BugLocation","FishLocation","Hemisphere","Rarity","Month","originalBugs","convertCreatureJsonToInterface","bugs","originalFish","fish","originalCreatureMap","Object","freeze","Bugs","Fish","creatureJson","values","map","id","name","price","availability","location","rarity","time","isAllDay","monthNorthern","monthSouthern","isAllYear","compareString","a","b","toLowerCase","convertNumberToTime","n","suffix","getAllTimeString","hours","i","push","hour","getMonthRanges","months","ranges","start","length","prevMonth","currMonth","sortAndFilterCreatures","creatures","sortField","searchKeyword","startTime","endTime","allDay","hemisphere","startMonth","endMonth","allYear","console","log","filtered","None","filter","filterByLocation","newCreatures","sort","NameAZ","NameZA","PriceLowHigh","PriceHighLow","RarityLessMore","RarityMoreLess","sortBySortField","filterByAllDay","timeSet","Set","has","filterByTime","filterByAllYear","monthSet","North","filterByMonth","keyword","j","m","isSubsequence","filterBySearchKeyword","getCreatureUpdates","listView","searchInput","SearchInputContainer","styled","div","SearchInput","search","type","onChange","ViewsContainer","Views","changeListView","currentListView","value","checked","Locations","handleLocationChange","locations","key","AllDay","span","Time","handleAllDayCheckboxChange","handleStartTimeChange","handleEndTimeChange","disabled","timeString","index","slice","AllYear","Months","handleHemisphereChange","handleAllYearCheckboxChange","handleStartMonthChange","handleEndMonthChange","South","month","SortFields","handleSortFieldChange","CreatureName","h1","CreatureCard","Label","Creatures","join","getTimeDisplay","AppContainer","Filters","initialState","App","props","event","target","setState","changeHemisphere","handleSearchInputChange","state","parseInt","updates","this","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5aecbcc.chunk.js","sourcesContent":["export enum ListView {\n  Bugs = 'bugs',\n  Fish = 'fish',\n}\n\nexport enum SortField {\n  None = 'None',\n  NameAZ = 'Name (A - Z)',\n  NameZA = 'Name (Z - A)',\n  PriceLowHigh = 'Price (Low - High)',\n  PriceHighLow = 'Price (High - Low)',\n  RarityLessMore = 'Rarity (Less - More)',\n  RarityMoreLess = 'Rarity (More - Less)',\n}\n\nexport enum BugLocation {\n  None = 'None',\n  Flying = 'Flying',\n  FlyingHybridFlowers = 'Flying near hybrid flowers',\n  FlyingLight = 'Flying by light',\n  Trees = 'On trees',\n  Ground = 'On the ground',\n  Flowers = 'On flowers',\n  WhiteFlowers = 'On white flowers',\n  ShakingTrees = 'Shaking trees',\n  Underground = 'Underground',\n  PondsAndRivers = 'On ponds and rivers',\n  TreeStumps = 'On tree stumps',\n  PalmTrees = 'On palm trees',\n  UnderTrees = 'Under trees',\n  RottenFood = 'On rotten food',\n  Beach = 'On the beach',\n  BeachRocks = 'On beach rocks',\n  Trash = 'Near trash',\n  Villagers = 'On villagers',\n  RocksRain = 'On rocks (when raining)',\n  HittingRocks = 'Hitting rocks',\n  Empty = '',\n}\n\nexport enum FishLocation {\n  None = 'None',\n  River = 'River',\n  Pond = 'Pond',\n  RiverClifftop = 'River (Clifftop)',\n  RiverClifftopAndPond = 'River (Clifftop) & Pond',\n  RiverMouth = 'River (Mouth)',\n  Sea = 'Sea',\n  Pier = 'Pier',\n  SeaWhenRainingOrSnowing = 'Sea (when raining or snowing)',\n}\n\nexport enum Hemisphere {\n  North = 'Northern',\n  South = 'Southern',\n}\n\nexport const Month = [\n  '--',\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n]\n\nexport enum Rarity {\n  Common = 1,\n  Uncommon,\n  Rare,\n  'Ultra-rare',\n}\n\nexport type Location = BugLocation | FishLocation\n\ninterface Availability {\n  readonly location: Location\n  readonly rarity: Rarity\n  readonly time: number[] // starts at 0\n  readonly isAllDay: boolean\n  readonly monthNorthern: number[] // starts at 1\n  readonly monthSouthern: number[] // starts at 1\n  readonly isAllYear: boolean\n}\n\nexport interface ICreature {\n  readonly id: number\n  readonly name: string\n  readonly price: number\n  readonly availability: Availability\n}\n","import bugs from './bugs.json'\nimport fish from './fish.json'\n\nimport {\n  ListView,\n  SortField,\n  BugLocation,\n  FishLocation,\n  Location,\n  Month,\n  Rarity,\n  ICreature,\n  Hemisphere,\n} from './types'\n\nexport const originalBugs: ICreature[] = convertCreatureJsonToInterface(bugs)\nexport const originalFish: ICreature[] = convertCreatureJsonToInterface(fish)\nexport const originalCreatureMap = Object.freeze({\n  [ListView.Bugs]: originalBugs,\n  [ListView.Fish]: originalFish,\n})\n\nfunction convertCreatureJsonToInterface(creatureJson: any) {\n  return Object.values(creatureJson).map(({ id, name, price, availability }: any) => ({\n    id,\n    name: name['name-USen'],\n    price,\n    availability: {\n      location: availability.location,\n      rarity: availability.rarity,\n      time: availability['time-array'],\n      isAllDay: availability.isAllDay,\n      monthNorthern: availability['month-array-northern'],\n      monthSouthern: availability['month-array-southern'],\n      isAllYear: availability.isAllYear,\n    },\n  }))\n}\n\nexport function compareString(a: string, b: string): number {\n  return a.toLowerCase() > b.toLowerCase() ? 1 : -1\n}\n\n/**\n * Find if b is a subsequence of a\n * eg. isSubsequence('abcde', 'ace') => true, isSubsequence('abcde', 'abf') => false\n */\nexport function isSubsequence(a: string, b: string): boolean {\n  let j = 0\n  let [n, m] = [a.length, b.length]\n  for (let i = 0; i < n && j < m; i++) {\n    if (a[i] === b[j]) {\n      j++\n    }\n  }\n  return j === m\n}\n\n/**\n * Convert number to time of day\n * eg. convertNumberToTime(5) => '5am', convertNumberToTime(18) => '6pm\n */\nexport function convertNumberToTime(n: number): string {\n  // special cases\n  if (n === 0) {\n    return '12am'\n  }\n  if (n === 12) {\n    return '12pm'\n  }\n  const suffix = n < 12 ? 'am' : 'pm'\n  return `${n % 12}${suffix}`\n}\n\nexport function getAllTimeString(): string[] {\n  const hours = []\n  for (let i = 0; i < 24; i++) {\n    hours.push(i)\n  }\n  return hours.map((hour: number) => convertNumberToTime(hour))\n}\n\nexport function getMonthRanges(months: number[]): string[] {\n  const ranges = []\n  let start = months[0]\n  for (let i = 1; i < months.length; i++) {\n    const prevMonth = months[i - 1]\n    const currMonth = months[i]\n    if (currMonth !== prevMonth + 1 && prevMonth !== 12 && currMonth && 1) {\n      ranges.push(`${Month[start]} - ${Month[prevMonth]}`)\n      start = currMonth\n    }\n  }\n  return [...ranges, `${Month[start]} - ${Month[months[months.length - 1]]}`]\n}\n\nfunction sortAndFilterCreatures(\n  creatures: any[],\n  sortField: SortField,\n  searchKeyword: string,\n  location: Location,\n  startTime: number,\n  endTime: number,\n  allDay: boolean,\n  hemisphere: Hemisphere,\n  startMonth: number,\n  endMonth: number,\n  allYear: boolean\n): ICreature[] {\n  console.log(sortField, searchKeyword, location, startTime, endTime)\n  // sort first\n  const sortedBySortField = sortBySortField(creatures, sortField)\n\n  // then filter\n  let filtered = filterByLocation(sortedBySortField, location)\n  if (allDay) {\n    filtered = filterByAllDay(filtered)\n  } else {\n    filtered = filterByTime(filtered, startTime, endTime)\n  }\n\n  if (allYear) {\n    filtered = filterByAllYear(filtered)\n  } else if (startMonth > 0 && endMonth > 0) {\n    filtered = filterByMonth(filtered, hemisphere, startMonth, endMonth)\n  }\n\n  filtered = filterBySearchKeyword(filtered, searchKeyword)\n\n  return filtered\n}\n\nfunction sortBySortField(creatures: any[], sortField: SortField): ICreature[] {\n  const newCreatures = [...creatures]\n  switch (sortField) {\n    case SortField.None:\n      return newCreatures.sort((a: ICreature, b: ICreature) => a.id - b.id)\n\n    case SortField.NameAZ:\n      return newCreatures.sort((a: ICreature, b: ICreature) => compareString(a.name, b.name))\n\n    case SortField.NameZA:\n      return newCreatures.sort((a: ICreature, b: ICreature) => compareString(b.name, a.name))\n\n    case SortField.PriceLowHigh:\n      return newCreatures.sort((a: ICreature, b: ICreature) => a.price - b.price)\n\n    case SortField.PriceHighLow:\n      return newCreatures.sort((a: ICreature, b: ICreature) => b.price - a.price)\n\n    case SortField.RarityLessMore:\n      return newCreatures.sort(\n        (a: ICreature, b: ICreature) =>\n          (Rarity as any)[a.availability.rarity] - (Rarity as any)[b.availability.rarity]\n      )\n\n    case SortField.RarityMoreLess:\n      return newCreatures.sort(\n        (a: ICreature, b: ICreature) =>\n          (Rarity as any)[b.availability.rarity] - (Rarity as any)[a.availability.rarity]\n      )\n  }\n}\n\nfunction filterBySearchKeyword(creatures: ICreature[], keyword: string): ICreature[] {\n  return creatures.filter(({ name }) => isSubsequence(name.toLowerCase(), keyword.toLowerCase()))\n}\n\nfunction filterByLocation(creatures: ICreature[], location: Location): ICreature[] {\n  if (location === BugLocation.None || location === FishLocation.None) {\n    return creatures\n  }\n  return creatures.filter(\n    ({ availability: { location: creatureLocation } }) => creatureLocation === location\n  )\n}\n\nfunction filterByTime(creatures: ICreature[], startTime: number, endTime: number): ICreature[] {\n  if (startTime === -1) {\n    return creatures\n  }\n  return creatures.filter(({ availability: { time } }) => {\n    const timeSet = new Set(time)\n    return timeSet.has(startTime) && timeSet.has(endTime)\n  })\n}\n\nfunction filterByAllDay(creatures: ICreature[]) {\n  return creatures.filter(({ availability: { isAllDay } }) => isAllDay)\n}\n\nfunction filterByMonth(\n  creatures: ICreature[],\n  hemisphere: Hemisphere,\n  startMonth: number,\n  endMonth: number\n): ICreature[] {\n  if (startMonth === null || endMonth === null) {\n    return creatures\n  }\n  return creatures.filter(({ availability: { monthNorthern, monthSouthern } }) => {\n    const monthSet = new Set(hemisphere === Hemisphere.North ? monthNorthern : monthSouthern)\n    return monthSet.has(startMonth) && monthSet.has(endMonth)\n  })\n}\n\nfunction filterByAllYear(creatures: ICreature[]) {\n  return creatures.filter(({ availability: { isAllYear } }) => isAllYear)\n}\n\nexport function getCreatureUpdates(\n  listView: ListView,\n  sortField: SortField,\n  searchInput: string,\n  location: Location,\n  startTime: number,\n  endTime: number,\n  allDay: boolean,\n  hemisphere: Hemisphere,\n  startMonth: number,\n  endMonth: number,\n  allYear: boolean\n) {\n  return {\n    [listView]: sortAndFilterCreatures(\n      originalCreatureMap[listView],\n      sortField,\n      searchInput,\n      location,\n      startTime,\n      endTime,\n      allDay,\n      hemisphere,\n      startMonth,\n      endMonth,\n      allYear\n    ),\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface IProps {\n  search: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInputContainer = styled.div`\n  display: flex;\n  white-space: pre;\n`\n\nexport default function SearchInput({ search }: IProps) {\n  return (\n    <SearchInputContainer>\n      <span>Search: </span>\n      <input type=\"text\" onChange={search} />\n    </SearchInputContainer>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { ListView } from './types'\n\ninterface IProps {\n  changeListView: (event: React.ChangeEvent<HTMLInputElement>) => void\n  currentListView: ListView\n}\n\nconst ViewsContainer = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport default function Views({ changeListView, currentListView }: IProps) {\n  return (\n    <ViewsContainer>\n      <span>View: </span>\n      <div>\n        <input\n          type=\"radio\"\n          onChange={changeListView}\n          value={ListView.Bugs}\n          checked={currentListView === ListView.Bugs}\n        />\n        <label>Bugs</label>\n      </div>\n      <div>\n        <input\n          type=\"radio\"\n          onChange={changeListView}\n          value={ListView.Fish}\n          checked={currentListView === ListView.Fish}\n        />\n        <label>Fish</label>\n      </div>\n    </ViewsContainer>\n  )\n}\n","import React from 'react'\n\nimport { BugLocation, FishLocation, ListView, Location } from './types'\n\ninterface IProps {\n  handleLocationChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n  listView: ListView\n  location: Location\n}\n\nexport default function Locations({ handleLocationChange, listView, location }: IProps) {\n  const locations: Location[] =\n    listView === ListView.Bugs ? Object.values(BugLocation) : Object.values(FishLocation)\n  return (\n    <div>\n      <span>Location: </span>\n      <select value={location} onChange={handleLocationChange}>\n        {locations.map((location: Location) => (\n          <option key={location}>{location}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { getAllTimeString } from './helpers'\n\ninterface IProps {\n  handleAllDayCheckboxChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  handleStartTimeChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n  handleEndTimeChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n  allDay: boolean\n  startTime: number\n  endTime: number\n}\n\nconst AllDay = styled.span`\n  margin-right: 8px;\n`\n\nexport default function Time({\n  handleAllDayCheckboxChange,\n  handleStartTimeChange,\n  handleEndTimeChange,\n  allDay,\n  startTime,\n  endTime,\n}: IProps) {\n  return (\n    <div>\n      <span>Time: </span>\n      <span>\n        <input type=\"checkbox\" onChange={handleAllDayCheckboxChange} />\n        <AllDay>All Day</AllDay>\n      </span>\n      <span>\n        <select value={startTime > -1 ? startTime : '--'} onChange={handleStartTimeChange} disabled={allDay}>\n          {['--', ...getAllTimeString()].map((timeString, index) => (\n            <option key={timeString} value={index - 1}>\n              {timeString}\n            </option>\n          ))}\n        </select>\n        <span> - </span>\n        <select\n          value={endTime > -1 ? endTime : '--'}\n          onChange={handleEndTimeChange}\n          disabled={startTime === -1}\n        >\n          {['--', ...getAllTimeString().slice(startTime as number)].map((timeString, index) => (\n            <option key={timeString} value={index - 1}>\n              {timeString}\n            </option>\n          ))}\n        </select>\n      </span>\n    </div>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Hemisphere, Month } from './types'\n\ninterface IProps {\n  handleHemisphereChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  handleAllYearCheckboxChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  handleStartMonthChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n  handleEndMonthChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n  hemisphere: Hemisphere\n  allYear: boolean\n  startMonth: number\n  endMonth: number\n}\n\nconst AllYear = styled.span`\n  margin-right: 8px;\n`\n\nexport default function Months({\n  handleHemisphereChange,\n  handleAllYearCheckboxChange,\n  handleStartMonthChange,\n  handleEndMonthChange,\n  hemisphere,\n  allYear,\n  startMonth,\n  endMonth,\n}: IProps) {\n  return (\n    <div>\n      <span>Months: </span>\n      <div>\n        <div>\n          <input\n            type=\"radio\"\n            onChange={handleHemisphereChange}\n            value={Hemisphere.North}\n            checked={hemisphere === Hemisphere.North}\n          />\n          <label>Northern Hemisphere</label>\n        </div>\n        <div>\n          <input\n            type=\"radio\"\n            onChange={handleHemisphereChange}\n            value={Hemisphere.South}\n            checked={hemisphere === Hemisphere.South}\n          />\n          <label>Southern Hemisphere</label>\n        </div>\n      </div>\n      <div>\n        <span>\n          <input type=\"checkbox\" onChange={handleAllYearCheckboxChange} />\n          <AllYear>All Year</AllYear>\n        </span>\n        <select value={startMonth || ''} onChange={handleStartMonthChange} disabled={allYear}>\n          {Month.map((month, index) => (\n            <option key={month} value={index}>\n              {month}\n            </option>\n          ))}\n        </select>\n        <span> - </span>\n        <select value={endMonth || ''} onChange={handleEndMonthChange} disabled={!startMonth}>\n          {Month.slice(startMonth).map((month, index) => (\n            <option key={month} value={index}>\n              {month}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { SortField } from './types'\n\ninterface IProps {\n  handleSortFieldChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n  sortField: SortField\n}\n\nexport default function SortFields({ handleSortFieldChange, sortField }: IProps) {\n  return (\n    <div>\n      <span>Sort: </span>\n      <select value={sortField} onChange={handleSortFieldChange}>\n        {Object.values(SortField).map((sortField) => (\n          <option key={sortField}>{sortField}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { ICreature } from './types'\nimport { convertNumberToTime, getMonthRanges } from './helpers'\n\ninterface IProps {\n  creatures: ICreature[]\n}\n\nconst CreatureName = styled.h1`\n  margin: 0;\n  text-transform: capitalize;\n`\n\nconst CreatureCard = styled.div`\n  border: 1px solid;\n  margin-bottom: 16px;\n  padding: 8px;\n  border-radius: 2px;\n  box-shadow: 1px 1px #888;\n`\n\nconst Label = styled.span`\n  font-weight: bold;\n`\n\nfunction getTimeDisplay(time: number[]): string {\n  const startTime = convertNumberToTime(time[0])\n  const endTime = convertNumberToTime(time[time.length - 1])\n  return `${startTime} - ${endTime}`\n}\n\nexport default function Creatures({ creatures }: IProps) {\n  return (\n    <div>\n      {creatures.map(\n        ({\n          id,\n          availability: {\n            isAllDay,\n            isAllYear,\n            location,\n            monthNorthern,\n            monthSouthern,\n            rarity,\n            time,\n          },\n          name,\n          price,\n        }) => (\n          <CreatureCard key={id}>\n            <CreatureName>{name}</CreatureName>\n            <div>\n              <div>\n                <Label>Price: </Label>\n                <span>{price}</span>\n              </div>\n              <div>\n                <Label>Location: </Label>\n                <span>{location}</span>\n              </div>\n              <div>\n                <Label>Months (Northern Hemisphere): </Label>\n                <span>{isAllYear ? 'All year' : getMonthRanges(monthNorthern).join(', ')}</span>\n              </div>\n              <div>\n                <Label>Months (Southern Hemisphere): </Label>\n                <span>{isAllYear ? 'All year' : getMonthRanges(monthSouthern).join(', ')}</span>\n              </div>\n              <div>\n                <Label>Time: </Label>\n                <span>{isAllDay ? 'All day' : getTimeDisplay(time)}</span>\n              </div>\n              <div>\n                <Label>Rarity: </Label>\n                {/** fix ultra-rare (it shows up as Ultra-rare) */}\n                <span>{rarity}</span>\n              </div>\n            </div>\n          </CreatureCard>\n        )\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { ListView, SortField, ICreature, BugLocation, Location, Hemisphere, Month } from './types'\nimport { originalCreatureMap, getCreatureUpdates } from './helpers'\n\nimport SearchField from './SearchInput'\nimport Views from './Views'\nimport Locations from './Locations'\nimport Time from './Time'\nimport Months from './Months'\nimport SortFields from './SortFields'\nimport Creatures from './Creatures'\n\nimport './App.css'\n\ninterface IState {\n  // data\n  bugs: ICreature[]\n  fish: ICreature[]\n\n  // search\n  searchInput: string\n\n  // list view\n  listView: ListView\n\n  // location\n  location: Location\n\n  // time\n  startTime: number\n  endTime: number\n  allDay: boolean\n\n  // months\n  hemisphere: Hemisphere\n  startMonth: number\n  endMonth: number\n  allYear: boolean\n\n  // sort field\n  sortField: SortField\n}\n\nconst AppContainer = styled.div`\n  width: 100%;\n  max-width: max(70vw, 800px);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > * {\n    width: 100%;\n  }\n`\n\nconst Filters = styled.div`\n  margin-bottom: 24px;\n`\n\nconst initialState: IState = Object.freeze({\n  bugs: originalCreatureMap[ListView.Bugs],\n  fish: originalCreatureMap[ListView.Fish],\n  searchInput: '',\n  listView: ListView.Bugs,\n  location: BugLocation.None,\n  startTime: -1,\n  endTime: -1,\n  allDay: false,\n  hemisphere: Hemisphere.North,\n  startMonth: 0,\n  endMonth: 0,\n  allYear: false,\n  sortField: SortField.None,\n})\n\nexport default class App extends React.Component<{}, IState> {\n  constructor(props: any) {\n    super(props)\n    this.state = initialState\n  }\n\n  get creatures(): ICreature[] {\n    return this.state[this.state.listView]\n  }\n\n  changeListView = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const listView = event.target.value\n    this.setState({\n      ...initialState,\n      listView: listView as ListView,\n    })\n  }\n\n  changeHemisphere = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const hemisphere = event.target.value\n    this.setState({\n      ...initialState,\n      hemisphere: hemisphere as Hemisphere,\n    })\n  }\n\n  handleSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: searchInput } = event.target\n    const {\n      allDay,\n      allYear,\n      endMonth,\n      endTime,\n      hemisphere,\n      listView,\n      location,\n      sortField,\n      startMonth,\n      startTime,\n    } = this.state\n    this.setState({\n      ...getCreatureUpdates(\n        listView,\n        sortField,\n        searchInput,\n        location,\n        startTime,\n        endTime,\n        allDay,\n        hemisphere,\n        startMonth,\n        endMonth,\n        allYear\n      ),\n      searchInput,\n      ...{},\n    })\n  }\n\n  handleLocationChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    const location = value as Location\n    const {\n      allDay,\n      allYear,\n      endMonth,\n      endTime,\n      hemisphere,\n      listView,\n      searchInput,\n      sortField,\n      startMonth,\n      startTime,\n    } = this.state\n    this.setState({\n      ...getCreatureUpdates(\n        listView,\n        sortField,\n        searchInput,\n        location,\n        startTime,\n        endTime,\n        allDay,\n        hemisphere,\n        startMonth,\n        endMonth,\n        allYear\n      ),\n      location,\n      ...{},\n    })\n  }\n\n  handleStartTimeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    console.log(value)\n    const startTime = parseInt(value)\n    if (startTime > -1) {\n      this.setState({\n        startTime,\n        endTime: -1,\n      })\n    } else {\n      this.setState({\n        startTime: -1,\n        endTime: -1,\n      })\n    }\n  }\n\n  handleEndTimeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    const {\n      allDay,\n      allYear,\n      endMonth,\n      hemisphere,\n      listView,\n      location,\n      searchInput,\n      sortField,\n      startMonth,\n      startTime,\n    } = this.state\n    console.log(value)\n    const endTime = parseInt(value)\n    this.setState({\n      ...getCreatureUpdates(\n        listView,\n        sortField,\n        searchInput,\n        location,\n        startTime,\n        endTime,\n        allDay,\n        hemisphere,\n        startMonth,\n        endMonth,\n        allYear\n      ),\n      endTime,\n      ...{},\n    })\n  }\n\n  handleAllDayCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { checked } = event.target\n    const {\n      allYear,\n      endMonth,\n      endTime,\n      hemisphere,\n      listView,\n      location,\n      searchInput,\n      sortField,\n      startMonth,\n      startTime,\n    } = this.state\n    const allDay = checked\n    const updates: any = { allDay }\n    if (allDay) {\n      updates.startTime = -1\n      updates.endTime = -1\n    }\n    this.setState({\n      ...getCreatureUpdates(\n        listView,\n        sortField,\n        searchInput,\n        location,\n        startTime,\n        endTime,\n        allDay,\n        hemisphere,\n        startMonth,\n        endMonth,\n        allYear\n      ),\n      ...updates,\n      ...{},\n    })\n  }\n\n  handleStartMonthChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    console.log(value)\n    const month = parseInt(value)\n    if (month > 0) {\n      this.setState({\n        startMonth: month,\n        endMonth: 0,\n      })\n    } else {\n      this.setState({\n        startMonth: 0,\n        endMonth: 0,\n      })\n    }\n  }\n\n  handleEndMonthChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    const {\n      allDay,\n      allYear,\n      endTime,\n      hemisphere,\n      listView,\n      location,\n      searchInput,\n      sortField,\n      startMonth,\n      startTime,\n    } = this.state\n    console.log(value)\n    const endMonth = parseInt(value)\n    this.setState({\n      ...getCreatureUpdates(\n        listView,\n        sortField,\n        searchInput,\n        location,\n        startTime,\n        endTime,\n        allDay,\n        hemisphere,\n        startMonth,\n        endMonth,\n        allYear\n      ),\n      endMonth,\n      ...{},\n    })\n  }\n\n  handleAllYearCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { checked } = event.target\n    console.log(checked)\n    const {\n      allDay,\n      endMonth,\n      endTime,\n      hemisphere,\n      listView,\n      location,\n      searchInput,\n      sortField,\n      startMonth,\n      startTime,\n    } = this.state\n    const allYear = checked\n    const updates: any = { allYear }\n    if (allYear) {\n      updates.startMonth = null\n      updates.endMonth = null\n    }\n    this.setState({\n      ...getCreatureUpdates(\n        listView,\n        sortField,\n        searchInput,\n        location,\n        startTime,\n        endTime,\n        allDay,\n        hemisphere,\n        startMonth,\n        endMonth,\n        allYear,\n      ),\n      ...updates,\n      ...{},\n    })\n  }\n\n  handleSortFieldChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    const {\n      allDay,\n      allYear,\n      endMonth,\n      endTime,\n      hemisphere,\n      listView,\n      location,\n      searchInput,\n      startMonth,\n      startTime,\n    } = this.state\n    const sortField = value as SortField\n    this.setState({\n      ...getCreatureUpdates(\n        listView,\n        sortField,\n        searchInput,\n        location,\n        startTime,\n        endTime,\n        allDay,\n        hemisphere,\n        startMonth,\n        endMonth,\n        allYear\n      ),\n      sortField,\n      ...{},\n    })\n  }\n\n  render() {\n    const {\n      allDay,\n      allYear,\n      endMonth,\n      endTime,\n      hemisphere,\n      listView,\n      location,\n      sortField,\n      startMonth,\n      startTime,\n    } = this.state\n\n    return (\n      <AppContainer>\n        <Filters>\n          <SearchField search={this.handleSearchInputChange} />\n          <Views changeListView={this.changeListView} currentListView={listView} />\n          <Locations\n            handleLocationChange={this.handleLocationChange}\n            listView={listView}\n            location={location}\n          />\n          <Time\n            handleAllDayCheckboxChange={this.handleAllDayCheckboxChange}\n            handleStartTimeChange={this.handleStartTimeChange}\n            handleEndTimeChange={this.handleEndTimeChange}\n            allDay={allDay}\n            startTime={startTime}\n            endTime={endTime}\n          />\n          <Months\n            handleHemisphereChange={this.changeHemisphere}\n            handleAllYearCheckboxChange={this.handleAllYearCheckboxChange}\n            handleStartMonthChange={this.handleStartMonthChange}\n            handleEndMonthChange={this.handleEndMonthChange}\n            hemisphere={hemisphere}\n            allYear={allYear}\n            startMonth={startMonth}\n            endMonth={endMonth}\n          />\n          <SortFields handleSortFieldChange={this.handleSortFieldChange} sortField={sortField} />\n        </Filters>\n        <Creatures creatures={this.creatures} />\n      </AppContainer>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}