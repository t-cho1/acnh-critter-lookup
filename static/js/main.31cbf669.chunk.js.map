{"version":3,"sources":["types.ts","helpers.ts","SearchInput.tsx","Views.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ListView","SortDirection","SortField","BugLocation","FishLocation","Rarity","originalBugs","convertCreatureJsonToInterface","bugs","originalFish","fish","originalCreatureMap","Object","freeze","Bugs","Fish","creatureJson","values","map","id","name","price","availability","location","rarity","compareString","a","b","toLowerCase","sortAndFilterCreatures","creatures","sortField","searchKeyword","console","log","filtered","None","filter","creature","filterByLocation","newCreatures","sort","NameAZ","NameZA","PriceLowHigh","PriceHighLow","RarityLessMore","RarityMoreLess","sortBySortField","keyword","j","length","n","m","i","isSubsequence","filterBySearchKeyword","SearchInputContainer","styled","div","SearchInput","search","type","onChange","ViewsContainer","Views","changeListView","currentListView","value","checked","AppContainer","Filters","CreatureName","h1","CreatureCard","CreatureInfo","span","App","props","initialState","searchInput","listView","event","target","setState","handleSearchInputChange","state","handleLocationChange","handleSortFieldChange","this","locations","key","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.31cbf669.chunk.js","sourcesContent":["export enum ListView {\n  Bugs = 'bugs',\n  Fish = 'fish',\n}\n\nexport enum SortDirection {\n  Ascending = 'ASC',\n  Descending = 'DESC',\n  NotApplicable = 'NOT_APPLICABLE',\n}\n\n// export enum SortField {\n//   Id = 'id',\n//   Name = 'name',\n//   Price = 'price',\n//   Rarity = 'rarity',\n// }\n\nexport enum SortField {\n  None = 'None',\n  NameAZ = 'Name (A - Z)',\n  NameZA = 'Name (Z - A)',\n  PriceLowHigh = 'Price (Low - High)',\n  PriceHighLow = 'Price (High - Low)',\n  RarityLessMore = 'Rarity (Less - More)',\n  RarityMoreLess = 'Rarity (More - Less)'\n}\n\nexport enum BugLocation {\n  None = 'None',\n  Flying = 'Flying',\n  FlyingHybridFlowers = 'Flying near hybrid flowers',\n  FlyingLight = 'Flying by light',\n  Trees = 'On trees',\n  Ground = 'On the ground',\n  Flowers = 'On flowers',\n  WhiteFlowers = 'On white flowers',\n  ShakingTrees = 'Shaking trees',\n  Underground = 'Underground',\n  PondsAndRivers = 'On ponds and rivers',\n  TreeStumps = 'On tree stumps',\n  PalmTrees = 'On palm trees',\n  UnderTrees = 'Under trees',\n  RottenFood = 'On rotten food',\n  Beach = 'On the beach',\n  BeachRocks = 'On beach rocks',\n  Trash = 'Near trash',\n  Villagers = 'On villagers',\n  RocksRain = 'On rocks (when raining)',\n  HittingRocks = 'Hitting rocks',\n  Empty = '',\n}\n\nexport enum FishLocation {\n  None = 'None',\n  River = 'River',\n  Pond = 'Pond',\n  RiverClifftop = 'River (Clifftop)',\n  RiverClifftopAndPond = 'River (Clifftop) & Pond',\n  RiverMouth = 'River (Mouth)',\n  Sea = 'Sea',\n  Pier = 'Pier',\n  SeaWhenRainingOrSnowing = 'Sea (when raining or snowing)',\n}\n\nexport enum Rarity {\n  Common = 1,\n  Uncommon,\n  Rare,\n  'Ultra-rare',\n}\n\nexport type Location = BugLocation | FishLocation\n\ninterface Availability {\n  readonly location: Location\n  readonly rarity: Rarity\n}\n\nexport interface ICreature {\n  readonly id: number\n  readonly name: string\n  readonly price: number\n  readonly availability: Availability\n}\n","import bugs from './bugs.json'\nimport fish from './fish.json'\n\nimport {\n  ListView,\n  SortField,\n  BugLocation,\n  FishLocation,\n  Location,\n  Rarity,\n  ICreature,\n} from './types'\n\nexport const originalBugs: ICreature[] = convertCreatureJsonToInterface(bugs)\nexport const originalFish: ICreature[] = convertCreatureJsonToInterface(fish)\nexport const originalCreatureMap = Object.freeze({\n  [ListView.Bugs]: originalBugs,\n  [ListView.Fish]: originalFish,\n})\n\nexport function convertCreatureJsonToInterface(creatureJson: any) {\n  return Object.values(creatureJson).map(({ id, name, price, availability }: any) => ({\n    id,\n    name: name['name-USen'],\n    price,\n    availability: {\n      location: availability.location,\n      rarity: availability.rarity,\n    },\n  }))\n}\n\nexport function compareString(a: string, b: string): number {\n  return a.toLowerCase() > b.toLowerCase() ? 1 : -1\n}\n\n/**\n * Find if b is a subsequence of a\n * eg. isSubsequence('abcde', 'ace') => true, isSubsequence('abcde', 'abf') => false\n */\nexport function isSubsequence(a: string, b: string): boolean {\n  let j = 0\n  let [n, m] = [a.length, b.length]\n  for (let i = 0; i < n && j < m; i++) {\n    if (a[i] === b[j]) {\n      j++\n    }\n  }\n  return j === m\n}\n\nexport function sortAndFilterCreatures(\n  creatures: any[],\n  sortField: SortField,\n  searchKeyword: string,\n  location: Location\n): ICreature[] {\n  console.log(sortField, searchKeyword, location)\n  // sort first\n  const sortedBySortField = sortBySortField(creatures, sortField)\n\n  // then filter by location and keyword\n  let filtered = filterByLocation(sortedBySortField, location)\n  filtered = filterBySearchKeyword(filtered, searchKeyword)\n\n  return filtered\n}\n\nexport function sortBySortField(creatures: any[], sortField: SortField): ICreature[] {\n  const newCreatures = [...creatures]\n  switch (sortField) {\n    case SortField.None:\n      return newCreatures.sort((a: ICreature, b: ICreature) => a.id - b.id)\n\n    case SortField.NameAZ:\n      return newCreatures.sort((a: ICreature, b: ICreature) => compareString(a.name, b.name))\n\n    case SortField.NameZA:\n      return newCreatures.sort((a: ICreature, b: ICreature) => compareString(b.name, a.name))\n\n    case SortField.PriceLowHigh:\n      return newCreatures.sort((a: ICreature, b: ICreature) => a.price - b.price)\n\n    case SortField.PriceHighLow:\n      return newCreatures.sort((a: ICreature, b: ICreature) => b.price - a.price)\n\n    case SortField.RarityLessMore:\n      return newCreatures.sort(\n        (a: ICreature, b: ICreature) =>\n          (Rarity as any)[a.availability.rarity] - (Rarity as any)[b.availability.rarity]\n      )\n\n    case SortField.RarityMoreLess:\n      return newCreatures.sort(\n        (a: ICreature, b: ICreature) =>\n          (Rarity as any)[b.availability.rarity] - (Rarity as any)[a.availability.rarity]\n      )\n  }\n}\n\nexport function filterBySearchKeyword(creatures: ICreature[], keyword: string): ICreature[] {\n  return creatures.filter((creature: ICreature) =>\n    isSubsequence(creature.name.toLowerCase(), keyword.toLowerCase())\n  )\n}\n\nexport function filterByLocation(creatures: ICreature[], location: Location): ICreature[] {\n  if (location === BugLocation.None || location === FishLocation.None) {\n    return creatures\n  }\n  return creatures.filter((creature: ICreature) => creature.availability.location === location)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface IProps {\n  search: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInputContainer = styled.div`\n  display: flex;\n  white-space: pre;\n`\n\nexport default function SearchInput({ search }: IProps) {\n  return (\n    <SearchInputContainer>\n      <span>Search: </span>\n      <input type=\"text\" onChange={search} />\n    </SearchInputContainer>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { ListView } from './types'\n\ninterface IProps {\n  changeListView: (event: React.ChangeEvent<HTMLInputElement>) => void\n  currentListView: ListView\n}\n\nconst ViewsContainer = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport default function Views({ changeListView, currentListView }: IProps) {\n  return (\n    <ViewsContainer>\n      <span>View: </span>\n      <div>\n        <input\n          type=\"radio\"\n          onChange={changeListView}\n          value={ListView.Bugs}\n          checked={currentListView === ListView.Bugs}\n        />\n        <label>Bugs</label>\n      </div>\n      <div>\n        <input\n          type=\"radio\"\n          onChange={changeListView}\n          value={ListView.Fish}\n          checked={currentListView === ListView.Fish}\n        />\n        <label>Fish</label>\n      </div>\n    </ViewsContainer>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { ListView, SortField, ICreature, BugLocation, FishLocation, Location } from './types'\nimport { originalBugs, originalFish, originalCreatureMap, sortAndFilterCreatures } from './helpers'\n\nimport SearchField from './SearchInput'\nimport Views from './Views'\n\nimport './App.css'\n\ninterface IState {\n  // data\n  bugs: ICreature[]\n  fish: ICreature[]\n\n  // search\n  searchInput: string\n\n  // list view\n  listView: ListView\n\n  // location\n  location: Location\n\n  // sort field\n  sortField: SortField\n}\n\nconst AppContainer = styled.div`\n  width: 100%;\n  max-width: max(70vw, 800px);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > * {\n    width: 100%;\n  }\n`\n\nconst Filters = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CreatureName = styled.h1`\n  margin: 0;\n  text-transform: capitalize;\n`\n\nconst CreatureCard = styled.div`\n  border: 1px solid;\n  margin-bottom: 16px;\n  padding: 8px;\n  border-radius: 2px;\n  box-shadow: 1px 1px #888;\n`\n\nconst CreatureInfo = styled.span`\n  font-weight: bold;\n`\n\nexport default class App extends React.Component<{}, IState> {\n  constructor(props: any) {\n    super(props)\n    this.state = this.initialState\n  }\n\n  initialState = Object.freeze({\n    bugs: originalBugs,\n    fish: originalFish,\n    searchInput: '',\n    listView: ListView.Bugs,\n    location: BugLocation.None,\n    sortField: SortField.None,\n  })\n\n  get creatures(): ICreature[] {\n    return this.state[this.state.listView]\n  }\n\n  changeListView = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const listView = event.target.value\n    this.setState({\n      ...this.initialState,\n      listView: listView as ListView,\n    })\n  }\n\n  handleSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: searchInput } = event.target\n    const { location, sortField } = this.state\n    this.setState({\n      [this.state.listView]: sortAndFilterCreatures(\n        originalCreatureMap[this.state.listView],\n        sortField,\n        searchInput,\n        location\n      ),\n      searchInput,\n      ...{},\n    })\n  }\n\n  handleLocationChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    const location = value as Location\n    const { searchInput, sortField } = this.state\n    this.setState({\n      [this.state.listView]: sortAndFilterCreatures(\n        originalCreatureMap[this.state.listView],\n        sortField,\n        searchInput,\n        location\n      ),\n      location,\n      ...{},\n    })\n  }\n\n  handleSortFieldChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    const { location, searchInput } = this.state\n    const sortField = value as SortField\n    this.setState({\n      [this.state.listView]: sortAndFilterCreatures(\n        originalCreatureMap[this.state.listView],\n        sortField,\n        searchInput,\n        location\n      ),\n      sortField,\n      ...{},\n    })\n  }\n\n  render() {\n    const { listView, location, sortField } = this.state\n    const locations: Location[] =\n      listView === ListView.Bugs ? Object.values(BugLocation) : Object.values(FishLocation)\n\n    return (\n      <AppContainer>\n        <Filters>\n          <SearchField search={this.handleSearchInputChange} />\n          <Views changeListView={this.changeListView} currentListView={listView} />\n          <div>\n            <span>Location: </span>\n            <select value={location} onChange={this.handleLocationChange}>\n              {locations.map((location: Location) => (\n                <option key={location}>{location}</option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <span>Sort: </span>\n            <select value={sortField} onChange={this.handleSortFieldChange}>\n              {Object.values(SortField).map((sortField) => (\n                <option key={sortField}>{sortField}</option>\n              ))}\n            </select>\n          </div>\n        </Filters>\n        <div>\n          {this.creatures.map((creature) => (\n            <CreatureCard key={creature.id}>\n              <CreatureName>{creature.name}</CreatureName>\n              <div>\n                <div>\n                  <span>Price: </span>\n                  <CreatureInfo>{creature.price}</CreatureInfo>\n                </div>\n                <div>\n                  <span>Location: </span>\n                  <CreatureInfo>{creature.availability.location}</CreatureInfo>\n                </div>\n                <div>\n                  <span>Rarity: </span>\n                  <CreatureInfo>{creature.availability.rarity}</CreatureInfo>\n                </div>\n              </div>\n            </CreatureCard>\n          ))}\n        </div>\n      </AppContainer>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}