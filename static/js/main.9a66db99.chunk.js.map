{"version":3,"sources":["types.ts","search-input-context.tsx","SearchInput.tsx","list-view-context.tsx","locations-context.tsx","sort-field-context.tsx","Views.tsx","Locations.tsx","helpers.ts","time-context.tsx","Time.tsx","hemispheres-context.tsx","Hemispheres.tsx","months-context.tsx","Months.tsx","SortFields.tsx","Creatures.tsx","Bottom.tsx","BottomFilters.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ListView","SortField","BugLocation","FishLocation","Hemisphere","SearchInputContext","createContext","searchInput","setSearchInput","SearchInputContextProvider","children","useState","Provider","value","SearchInput","isSmallViewport","useContext","sx","borderRadius","type","onChange","event","target","placeholder","Rarity","Month","ListViewContext","listView","Bugs","setListView","ListViewContextProvider","LocationsContext","location","None","setLocation","LocationsContextProvider","SortFieldContext","sortField","setSortField","SortFieldContextProvider","Views","alignItems","justifySelf","mr","onClick","changeListView","Fish","checked","ml","Locations","locations","Object","values","flexDirection","map","key","convertCreatureJsonToInterface","creatureJson","id","name","price","availability","rarity","time","isAllDay","monthNorthern","monthSouthern","isAllYear","originalBugs","bugs","originalFish","fish","originalCreatureMap","freeze","compareString","a","b","toLowerCase","convertNumberToTime","n","suffix","getAllTimeString","hours","i","push","hour","getMonthRanges","months","ranges","start","length","prevMonth","currMonth","getRarityValue","keys","indexOf","TimeContext","allDay","startTime","endTime","setAllDay","setStartTime","setEndTime","TimeContextProvider","Time","parseInt","disabled","timeString","index","mx","slice","HemispheresContext","hemisphere","North","setHemisphere","HemispheresContextProvider","Hemispheres","South","MonthsContext","allYear","startMonth","endMonth","setAllYear","setStartMonth","setEndMonth","MonthsContextProvider","Months","month","SortFields","Container","display","gridTemplateColumns","rowGap","columnGap","Creatures","creatures","filter","creature","j","m","isSubsequence","filterBySearchInput","filterByLocation","filterByAllDay","timeSet","Set","has","filterByTime","filterByAllYear","monthSet","filterByMonth","sort","NameAZ","NameZA","PriceLowHigh","PriceHighLow","RarityLessMore","RarityMoreLess","sortBySortField","p","border","mb","fontWeight","fontSize","textTransform","textDecoration","size","join","getTimeDisplay","Bottom","isBottomFiltersOpen","setIsBottomFiltersOpen","justifyContent","position","bottom","left","right","borderTop","pt","width","BottomFilters","backgroundColor","gridTemplateRows","AppContainer","height","px","py","overflow","gridTemplateAreas","Top","gridArea","Filters","Content","App","window","innerWidth","setIsSmallViewport","handleResize","useEffect","addEventListener","removeEventListener","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a66db99.chunk.js","sourcesContent":["export enum ListView {\n  Bugs = 'bugs',\n  Fish = 'fish',\n}\n\nexport enum SortField {\n  None = 'None',\n  NameAZ = 'Name (A - Z)',\n  NameZA = 'Name (Z - A)',\n  PriceLowHigh = 'Price (Low - High)',\n  PriceHighLow = 'Price (High - Low)',\n  RarityLessMore = 'Rarity (Less - More)',\n  RarityMoreLess = 'Rarity (More - Less)',\n}\n\nexport enum BugLocation {\n  None = 'None',\n  Flying = 'Flying',\n  FlyingHybridFlowers = 'Flying near hybrid flowers',\n  FlyingLight = 'Flying by light',\n  Trees = 'On trees',\n  Ground = 'On the ground',\n  Flowers = 'On flowers',\n  WhiteFlowers = 'On white flowers',\n  ShakingTrees = 'Shaking trees',\n  Underground = 'Underground',\n  PondsAndRivers = 'On ponds and rivers',\n  TreeStumps = 'On tree stumps',\n  PalmTrees = 'On palm trees',\n  UnderTrees = 'Under trees',\n  RottenFood = 'On rotten food',\n  Beach = 'On the beach',\n  BeachRocks = 'On beach rocks',\n  Trash = 'Near trash',\n  Villagers = 'On villagers',\n  RocksRain = 'On rocks (when raining)',\n  HittingRocks = 'Hitting rocks',\n  Empty = '',\n}\n\nexport enum FishLocation {\n  None = 'None',\n  River = 'River',\n  Pond = 'Pond',\n  RiverClifftop = 'River (Clifftop)',\n  RiverClifftopAndPond = 'River (Clifftop) & Pond',\n  RiverMouth = 'River (Mouth)',\n  Sea = 'Sea',\n  Pier = 'Pier',\n  SeaWhenRainingOrSnowing = 'Sea (when raining or snowing)',\n}\n\nexport enum Hemisphere {\n  North = 'Northern',\n  South = 'Southern',\n}\n\nexport const Month = [\n  '--',\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'June',\n  'July',\n  'Aug',\n  'Sept',\n  'Oct',\n  'Nov',\n  'Dec',\n]\n\nexport enum Rarity {\n  Common = 'Common',\n  Uncommon = 'Uncommon',\n  Rare = 'Rare',\n  UltraRare = 'Ultra Rare',\n}\n\nexport type Location = BugLocation | FishLocation\n\ninterface Availability {\n  readonly location: Location\n  readonly rarity: Rarity\n  readonly time: number[] // starts at 0\n  readonly isAllDay: boolean\n  readonly monthNorthern: number[] // starts at 1\n  readonly monthSouthern: number[] // starts at 1\n  readonly isAllYear: boolean\n}\n\nexport interface ICreature {\n  readonly id: number\n  readonly name: string\n  readonly price: number\n  readonly availability: Availability\n}\n","import React, { createContext, useState } from 'react'\n\ntype SearchInputContextType = {\n  searchInput: string\n  setSearchInput: (searchInput: string) => void\n}\n\nexport const SearchInputContext = createContext<SearchInputContextType>({\n  searchInput: '',\n  setSearchInput: () => {},\n})\n\nexport const SearchInputContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [searchInput, setSearchInput] = useState('')\n\n  return (\n    <SearchInputContext.Provider value={{ searchInput, setSearchInput }}>\n      {children}\n    </SearchInputContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport { Box } from 'rebass'\nimport { Label, Input } from '@rebass/forms'\n\nimport { SearchInputContext } from './search-input-context'\n\ninterface IProps {\n  isSmallViewport?: boolean\n}\n\nexport default function SearchInput({ isSmallViewport }: IProps) {\n  const { searchInput, setSearchInput } = useContext(SearchInputContext)\n\n  return (\n    <Box>\n      {!isSmallViewport && <Label>Search: </Label>}\n      <Input\n        sx={{ borderRadius: 2 }}\n        type=\"text\"\n        value={searchInput}\n        onChange={(event) => setSearchInput(event.target.value as string)}\n        placeholder={isSmallViewport ? 'Butterfly, Sea bass' : ''}\n      />\n    </Box>\n  )\n}\n","import React, { createContext, useState } from 'react'\n\nimport { ListView } from './types'\n\ntype ListViewContextType = {\n  listView: ListView\n  setListView: (listView: ListView) => void\n}\n\nexport const ListViewContext = createContext<ListViewContextType>({\n  listView: ListView.Bugs,\n  setListView: () => {},\n})\n\nexport const ListViewContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [listView, setListView] = useState(ListView.Bugs)\n\n  return (\n    <ListViewContext.Provider value={{ listView, setListView }}>\n      {children}\n    </ListViewContext.Provider>\n  )\n}\n","import React, { createContext, useContext, useState } from 'react'\n\nimport { Location, BugLocation, FishLocation, ListView } from './types'\nimport { ListViewContext } from './list-view-context'\n\ntype LocationsContextType = {\n  location: Location\n  setLocation: (location: Location) => void\n}\n\nexport const LocationsContext = createContext<LocationsContextType>({\n  location: BugLocation.None,\n  setLocation: () => {},\n})\n\nexport const LocationsContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const { listView } = useContext(ListViewContext)\n  const [location, setLocation] = useState(\n    listView === ListView.Bugs ? BugLocation.None : FishLocation.None\n  )\n\n  return (\n    <LocationsContext.Provider value={{ location, setLocation }}>\n      {children}\n    </LocationsContext.Provider>\n  )\n}\n","import React, { createContext, useState } from 'react'\n\nimport { SortField } from './types'\n\ntype SortFieldContextType = {\n  sortField: SortField\n  setSortField: (sortField: SortField) => void\n}\n\nexport const SortFieldContext = createContext<SortFieldContextType>({\n  sortField: SortField.None,\n  setSortField: () => {},\n})\n\nexport const SortFieldContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [sortField, setSortField] = useState(SortField.None)\n\n  return (\n    <SortFieldContext.Provider value={{ sortField, setSortField }}>\n      {children}\n    </SortFieldContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport { Flex, Text } from 'rebass'\nimport { Switch } from '@rebass/forms'\n\nimport { ListView, BugLocation, FishLocation, SortField } from './types'\nimport { ListViewContext } from './list-view-context'\nimport { SearchInputContext } from './search-input-context'\nimport { LocationsContext } from './locations-context'\nimport { SortFieldContext } from './sort-field-context'\n\nexport default function Views() {\n  const { listView, setListView } = useContext(ListViewContext)\n  const { setSearchInput } = useContext(SearchInputContext)\n  const { setLocation } = useContext(LocationsContext)\n  const { setSortField } = useContext(SortFieldContext)\n\n  // TODO: extract this logic\n  const changeListView = (listView: ListView) => {\n    setListView(listView)\n    setSearchInput('')\n    setLocation(listView === ListView.Bugs ? BugLocation.None : FishLocation.None)\n    setSortField(SortField.None)\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifySelf=\"center\">\n      <Text mr={1}>Bugs</Text>\n      <Switch\n        onClick={() => changeListView(listView === ListView.Bugs ? ListView.Fish : ListView.Bugs)}\n        checked={listView === ListView.Fish}\n      />\n      <Text ml={1}>Fish</Text>\n    </Flex>\n  )\n}\n","import React, { useContext } from 'react'\nimport { Flex } from 'rebass'\nimport { Label, Select } from '@rebass/forms'\n\nimport { BugLocation, FishLocation, ListView, Location } from './types'\nimport { LocationsContext } from './locations-context'\nimport { ListViewContext } from './list-view-context'\n\nexport default function Locations() {\n  const { listView } = useContext(ListViewContext)\n  const { location, setLocation } = useContext(LocationsContext)\n\n  const locations: Location[] =\n    listView === ListView.Bugs ? Object.values(BugLocation) : Object.values(FishLocation)\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Label>Location: </Label>\n      <Select value={location} onChange={(event) => setLocation(event.target.value as Location)}>\n        {locations.map((location: Location) => (\n          <option key={location}>{location}</option>\n        ))}\n      </Select>\n    </Flex>\n  )\n}\n","import bugs from './bugs.json'\nimport fish from './fish.json'\n\nimport {\n  ListView,\n  SortField,\n  BugLocation,\n  FishLocation,\n  Location,\n  Month,\n  Rarity,\n  ICreature,\n  Hemisphere,\n} from './types'\n\nconst convertCreatureJsonToInterface = (creatureJson: any) =>\n  Object.values(creatureJson).map(({ id, name, price, availability }: any) => ({\n    id,\n    name: name['name-USen'],\n    price,\n    availability: {\n      location: availability.location,\n      rarity: availability.rarity === 'Ultra-rare' ? 'UltraRare' : availability.rarity,\n      time: availability['time-array'],\n      isAllDay: availability.isAllDay,\n      monthNorthern: availability['month-array-northern'],\n      monthSouthern: availability['month-array-southern'],\n      isAllYear: availability.isAllYear,\n    },\n  }))\n\nexport const originalBugs: ICreature[] = convertCreatureJsonToInterface(bugs)\nexport const originalFish: ICreature[] = convertCreatureJsonToInterface(fish)\nexport const originalCreatureMap = Object.freeze({\n  [ListView.Bugs]: originalBugs,\n  [ListView.Fish]: originalFish,\n})\n\nexport const compareString = (a: string, b: string): number =>\n  a.toLowerCase() > b.toLowerCase() ? 1 : -1\n\n/**\n * Find if b is a subsequence of a\n * eg. isSubsequence('abcde', 'ace') => true, isSubsequence('abcde', 'abf') => false\n */\nexport const isSubsequence = (a: string, b: string): boolean => {\n  let j = 0\n  let [n, m] = [a.length, b.length]\n  for (let i = 0; i < n && j < m; i++) {\n    if (a[i] === b[j]) {\n      j++\n    }\n  }\n  return j === m\n}\n\n/**\n * Convert number to time of day\n * eg. convertNumberToTime(5) => '5am', convertNumberToTime(18) => '6pm\n */\nexport const convertNumberToTime = (n: number): string => {\n  // special cases\n  if (n === 0) {\n    return '12am'\n  }\n  if (n === 12) {\n    return '12pm'\n  }\n  const suffix = n < 12 ? 'am' : 'pm'\n  return `${n % 12}${suffix}`\n}\n\nexport const getAllTimeString = (): string[] => {\n  const hours = []\n  for (let i = 0; i < 24; i++) {\n    hours.push(i)\n  }\n  return hours.map((hour: number) => convertNumberToTime(hour))\n}\n\nexport const getMonthRanges = (months: number[]): string[] => {\n  const ranges = []\n  let start = months[0]\n  for (let i = 1; i < months.length; i++) {\n    const prevMonth = months[i - 1]\n    const currMonth = months[i]\n    if (currMonth !== prevMonth + 1 && prevMonth !== 12 && currMonth && 1) {\n      ranges.push(`${Month[start]} - ${Month[prevMonth]}`)\n      start = currMonth\n    }\n  }\n  return [...ranges, `${Month[start]} - ${Month[months[months.length - 1]]}`]\n}\n\nconst getRarityValue = (rarity: Rarity): number => Object.keys(Rarity).indexOf(rarity)\n\nexport const sortBySortField = (sortField: SortField) => (a: ICreature, b: ICreature) => {\n  switch (sortField) {\n    case SortField.None:\n      return a.id - b.id\n\n    case SortField.NameAZ:\n      return compareString(a.name, b.name)\n\n    case SortField.NameZA:\n      return compareString(b.name, a.name)\n\n    case SortField.PriceLowHigh:\n      return a.price - b.price\n\n    case SortField.PriceHighLow:\n      return b.price - a.price\n\n    case SortField.RarityLessMore:\n      return getRarityValue(a.availability.rarity) - getRarityValue(b.availability.rarity)\n\n    case SortField.RarityMoreLess:\n      return getRarityValue(b.availability.rarity) - getRarityValue(a.availability.rarity)\n  }\n}\n\nexport const filterBySearchInput = (searchInput: string) => (creature: ICreature) =>\n  isSubsequence(creature.name.toLowerCase(), searchInput.toLowerCase())\n\nexport const filterByLocation = (location: Location) => (creature: ICreature) => {\n  if (location === BugLocation.None || location === FishLocation.None) {\n    return true\n  }\n  return creature.availability.location === location\n}\n\nexport const filterByAllDay = (allDay: boolean) => (creature: ICreature) =>\n  creature.availability.isAllDay === allDay\n\nexport const filterByTime = (startTime: number, endTime: number) => (creature: ICreature) => {\n  if (endTime === -1) {\n    return true\n  }\n  const timeSet = new Set(creature.availability.time)\n  return timeSet.has(startTime) && timeSet.has(endTime)\n}\n\nexport const filterByAllYear = (allYear: boolean) => (creature: ICreature) =>\n  creature.availability.isAllYear === allYear\n\nexport const filterByMonth = (hemisphere: Hemisphere, startMonth: number, endMonth: number) => (\n  creature: ICreature\n) => {\n  if (startMonth === 0 || endMonth === 0) {\n    return true\n  }\n  const {\n    availability: { monthNorthern, monthSouthern },\n  } = creature\n  const monthSet = new Set(hemisphere === Hemisphere.North ? monthNorthern : monthSouthern)\n  return monthSet.has(startMonth) && monthSet.has(endMonth)\n}\n","import React, { createContext, useState } from 'react'\n\ntype TimeContextType = {\n  allDay: boolean\n  startTime: number\n  endTime: number\n  setAllDay: (allDay: boolean) => void\n  setStartTime: (startTime: number) => void\n  setEndTime: (endTime: number) => void\n}\n\nexport const TimeContext = createContext<TimeContextType>({\n  allDay: false,\n  startTime: -1,\n  endTime: -1,\n  setAllDay: () => {},\n  setStartTime: () => {},\n  setEndTime: () => {},\n})\n\nexport const TimeContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [allDay, setAllDay] = useState(false)\n  const [startTime, setStartTime] = useState(-1)\n  const [endTime, setEndTime] = useState(-1)\n\n  return (\n    <TimeContext.Provider\n      value={{ allDay, startTime, endTime, setAllDay, setStartTime, setEndTime }}\n    >\n      {children}\n    </TimeContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport { Box, Flex, Text } from 'rebass'\nimport { Label, Checkbox, Select } from '@rebass/forms'\n\nimport { getAllTimeString } from './helpers'\nimport { TimeContext } from './time-context'\n\nexport default function Time() {\n  const { allDay, startTime, endTime, setAllDay, setStartTime, setEndTime } = useContext(\n    TimeContext\n  )\n\n  const handleAllDayCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { checked } = event.target\n    if (checked) {\n      setStartTime(-1)\n      setEndTime(-1)\n    }\n    setAllDay(checked)\n  }\n\n  const handleStartTimeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    const startTime = parseInt(value)\n    if (startTime > -1) {\n      setStartTime(startTime)\n    } else {\n      setStartTime(-1)\n    }\n    setEndTime(-1)\n  }\n\n  return (\n    <Flex\n      justifySelf=\"center\"\n      flexDirection=\"column\"\n      sx={{\n        '@media (max-width: 600px)': {\n          justifySelf: 'unset',\n        },\n      }}\n    >\n      <span>Time: </span>\n      <Label alignItems=\"center\">\n        <Checkbox onChange={handleAllDayCheckboxChange} />\n        All Day\n      </Label>\n      <Flex alignItems=\"center\">\n        <Select\n          value={startTime > -1 ? startTime : '--'}\n          onChange={handleStartTimeChange}\n          disabled={allDay}\n        >\n          {['--', ...getAllTimeString()].map((timeString, index) => (\n            <option key={timeString} value={index - 1}>\n              {timeString}\n            </option>\n          ))}\n        </Select>\n        <Box mx={3}>\n          <Text>-</Text>\n        </Box>\n        <Select\n          value={endTime > -1 ? endTime : '--'}\n          onChange={(event) => setEndTime(parseInt(event.target.value))}\n          disabled={startTime === -1}\n        >\n          {['--', ...getAllTimeString().slice(startTime as number)].map((timeString, index) => (\n            <option key={timeString} value={index - 1}>\n              {timeString}\n            </option>\n          ))}\n        </Select>\n      </Flex>\n    </Flex>\n  )\n}\n","import React, { createContext, useState } from 'react'\n\nimport { Hemisphere } from './types'\n\ntype HemispheresContextType = {\n  hemisphere: Hemisphere\n  setHemisphere: (hemisphere: Hemisphere) => void\n}\n\nexport const HemispheresContext = createContext<HemispheresContextType>({\n  hemisphere: Hemisphere.North,\n  setHemisphere: () => {},\n})\n\nexport const HemispheresContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [hemisphere, setHemisphere] = useState(Hemisphere.North)\n\n  return (\n    <HemispheresContext.Provider\n      value={{\n        hemisphere,\n        setHemisphere,\n      }}\n    >\n      {children}\n    </HemispheresContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport { Flex } from 'rebass'\nimport { Label, Radio } from '@rebass/forms'\n\nimport { Hemisphere } from './types'\nimport { HemispheresContext } from './hemispheres-context'\n\nexport default function Hemispheres() {\n  const { hemisphere, setHemisphere } = useContext(HemispheresContext)\n\n  return (\n    <Flex\n      justifySelf=\"center\"\n      flexDirection=\"column\"\n      sx={{\n        '@media (max-width: 600px)': {\n          justifySelf: 'unset',\n        },\n      }}\n    >\n      <Label>Hemisphere:</Label>\n      <div>\n        <Label alignItems=\"center\">\n          <Radio\n            type=\"radio\"\n            onChange={() => setHemisphere(Hemisphere.North)}\n            value={Hemisphere.North}\n            checked={hemisphere === Hemisphere.North}\n          />\n          Northern\n        </Label>\n        <Label alignItems=\"center\">\n          <Radio\n            type=\"radio\"\n            onChange={() => setHemisphere(Hemisphere.South)}\n            value={Hemisphere.South}\n            checked={hemisphere === Hemisphere.South}\n          />\n          Southern\n        </Label>\n      </div>\n    </Flex>\n  )\n}\n","import React, { createContext, useState } from 'react'\n\ntype MonthsContextType = {\n  allYear: boolean\n  startMonth: number\n  endMonth: number\n  setAllYear: (allYear: boolean) => void\n  setStartMonth: (startMonth: number) => void\n  setEndMonth: (endMonth: number) => void\n}\n\nexport const MonthsContext = createContext<MonthsContextType>({\n  allYear: false,\n  startMonth: 0,\n  endMonth: 0,\n  setAllYear: () => {},\n  setStartMonth: () => {},\n  setEndMonth: () => {},\n})\n\nexport const MonthsContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [allYear, setAllYear] = useState(false)\n  const [startMonth, setStartMonth] = useState(0)\n  const [endMonth, setEndMonth] = useState(0)\n\n  return (\n    <MonthsContext.Provider\n      value={{\n        allYear,\n        startMonth,\n        endMonth,\n        setAllYear,\n        setStartMonth,\n        setEndMonth,\n      }}\n    >\n      {children}\n    </MonthsContext.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport { Box, Flex, Text } from 'rebass'\nimport { Label, Checkbox, Select } from '@rebass/forms'\n\nimport { Month } from './types'\nimport { MonthsContext } from './months-context'\n\nexport default function Months() {\n  const { allYear, startMonth, endMonth, setAllYear, setStartMonth, setEndMonth } = useContext(\n    MonthsContext\n  )\n\n  const handleAllYearCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { checked } = event.target\n    if (checked) {\n      setStartMonth(0)\n      setEndMonth(0)\n    }\n    setAllYear(checked)\n  }\n\n  const handleStartMonthChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target\n    const startMonth = parseInt(value)\n    if (startMonth > 0) {\n      setStartMonth(startMonth)\n    } else {\n      setStartMonth(0)\n    }\n    setEndMonth(0)\n  }\n\n  return (\n    <Flex\n      justifySelf=\"end\"\n      flexDirection=\"column\"\n      sx={{\n        '@media (max-width: 600px)': {\n          justifySelf: 'unset',\n        },\n      }}\n    >\n      <div>\n        <Label>Months: </Label>\n        <div>\n          <Flex>\n            <Label alignItems=\"center\">\n              <Checkbox type=\"checkbox\" onChange={handleAllYearCheckboxChange} />\n              All Year\n            </Label>\n          </Flex>\n          <Flex alignItems=\"center\">\n            <Select value={startMonth || ''} onChange={handleStartMonthChange} disabled={allYear}>\n              {Month.map((month, index) => (\n                <option key={month} value={index}>\n                  {month}\n                </option>\n              ))}\n            </Select>\n            <Box mx={3}>\n              <Text>-</Text>\n            </Box>\n            <Select\n              value={endMonth || ''}\n              onChange={(event) => setEndMonth(parseInt(event.target.value))}\n              disabled={!startMonth}\n            >\n              {Month.slice(startMonth).map((month, index) => (\n                <option key={month} value={index}>\n                  {month}\n                </option>\n              ))}\n            </Select>\n          </Flex>\n        </div>\n      </div>\n    </Flex>\n  )\n}\n","import React, { useContext } from 'react'\nimport { Flex } from 'rebass'\nimport { Label, Select } from '@rebass/forms'\n\nimport { SortField } from './types'\nimport { SortFieldContext } from './sort-field-context'\n\ninterface IProps {\n  isSmallViewport?: boolean\n}\n\nexport default function SortFields({ isSmallViewport }: IProps) {\n  const { sortField, setSortField } = useContext(SortFieldContext)\n\n  return (\n    <Flex flexDirection=\"column\">\n      {!isSmallViewport && <Label>Sort: </Label>}\n      <Select value={sortField} onChange={(event) => setSortField(event.target.value as SortField)}>\n        {Object.values(SortField).map((sortField) => (\n          <option key={sortField}>{sortField}</option>\n        ))}\n      </Select>\n    </Flex>\n  )\n}\n","import React, { useContext } from 'react'\nimport { Calendar, Clock, DollarSign, Gift, Map } from 'react-feather'\nimport { Box, Flex, Text } from 'rebass'\n\nimport { Rarity } from './types'\nimport {\n  originalCreatureMap,\n  convertNumberToTime,\n  getMonthRanges,\n  sortBySortField,\n  filterByLocation,\n  filterByAllDay,\n  filterByTime,\n  filterByAllYear,\n  filterByMonth,\n  filterBySearchInput,\n} from './helpers'\nimport { SearchInputContext } from './search-input-context'\nimport { ListViewContext } from './list-view-context'\nimport { LocationsContext } from './locations-context'\nimport { TimeContext } from './time-context'\nimport { HemispheresContext } from './hemispheres-context'\nimport { MonthsContext } from './months-context'\nimport { SortFieldContext } from './sort-field-context'\n\nconst Container = ({ children }: { children: React.ReactNode }) => (\n  <Box\n    display=\"grid\"\n    sx={{\n      gridTemplateColumns: '1fr 1fr 1fr',\n      rowGap: 24,\n      columnGap: 12,\n      '@media (max-width: 850px)': {\n        gridTemplateColumns: '1fr 1fr',\n      },\n      '@media (max-width: 600px)': {\n        gridTemplateColumns: '1fr',\n      },\n    }}\n  >\n    {children}\n  </Box>\n)\n\nfunction getTimeDisplay(time: number[]): string {\n  const startTime = convertNumberToTime(time[0])\n  const endTime = convertNumberToTime(time[time.length - 1])\n  return `${startTime} - ${endTime}`\n}\n\nexport default function Creatures() {\n  const { searchInput } = useContext(SearchInputContext)\n  const { listView } = useContext(ListViewContext)\n  const { location } = useContext(LocationsContext)\n  const { allDay, startTime, endTime } = useContext(TimeContext)\n  const { hemisphere } = useContext(HemispheresContext)\n  const { allYear, startMonth, endMonth } = useContext(MonthsContext)\n  const { sortField } = useContext(SortFieldContext)\n\n  const creatures = originalCreatureMap[listView]\n    .filter(filterBySearchInput(searchInput))\n    .filter(filterByLocation(location))\n    .filter(allDay ? filterByAllDay(allDay) : filterByTime(startTime, endTime))\n    .filter(allYear ? filterByAllYear(allYear) : filterByMonth(hemisphere, startMonth, endMonth))\n    .sort(sortBySortField(sortField))\n\n  return (\n    <Container>\n      {creatures.map(\n        ({\n          id,\n          availability: {\n            isAllDay,\n            isAllYear,\n            location,\n            monthNorthern,\n            monthSouthern,\n            rarity,\n            time,\n          },\n          name,\n          price,\n        }) => (\n          <Box key={id} p={2} sx={{ border: '1px solid', borderRadius: '2px' }}>\n            <Box mb={2}>\n              <Text\n                fontWeight=\"bold\"\n                fontSize={4}\n                sx={{ textTransform: 'capitalize', textDecoration: 'underline' }}\n              >\n                {name}\n              </Text>\n            </Box>\n            <div>\n              <Flex alignItems=\"center\" mb={2}>\n                <Flex mr={1}>\n                  <DollarSign size={20} />\n                </Flex>\n                <Text>{price}</Text>\n              </Flex>\n              <Flex alignItems=\"center\" mb={2}>\n                <Flex mr={1}>\n                  <Map size={20} />\n                </Flex>\n                <Text>{location}</Text>\n              </Flex>\n              <Flex alignItems=\"center\" mb={2}>\n                <Flex>\n                  <Calendar size={20} />\n                </Flex>\n                <Text fontWeight=\"bold\">(N)</Text>\n                <Text>{isAllYear ? 'All year' : getMonthRanges(monthNorthern).join(', ')}</Text>\n              </Flex>\n              <Flex alignItems=\"center\" mb={2}>\n                <Flex>\n                  <Calendar size={20} />\n                </Flex>\n                <Text fontWeight=\"bold\">(S)</Text>\n                <Text>{isAllYear ? 'All year' : getMonthRanges(monthSouthern).join(', ')}</Text>\n              </Flex>\n              <Flex alignItems=\"center\" mb={2}>\n                <Flex mr={1}>\n                  <Clock size={20} />\n                </Flex>\n                <Text>{isAllDay ? 'All day' : getTimeDisplay(time)}</Text>\n              </Flex>\n              <Flex alignItems=\"center\" mb={2}>\n                <Flex mr={1}>\n                  <Gift size={20} />\n                </Flex>\n                <Text>{Object.values(Rarity)[Object.keys(Rarity).indexOf(rarity)]}</Text>\n              </Flex>\n            </div>\n          </Box>\n        )\n      )}\n    </Container>\n  )\n}\n","import React from 'react'\nimport { Box, Flex, Text } from 'rebass'\n\nimport SearchInput from './SearchInput'\nimport SortFields from './SortFields'\nimport Views from './Views'\n\ninterface IProps {\n  isBottomFiltersOpen: boolean\n  isSmallViewport: boolean\n  setIsBottomFiltersOpen: (isBottomFiltersOpen: boolean) => void\n}\n\nexport default function Bottom({\n  isBottomFiltersOpen,\n  isSmallViewport,\n  setIsBottomFiltersOpen,\n}: IProps) {\n  if (!isSmallViewport) {\n    return null\n  }\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      sx={{\n        position: 'absolute',\n        bottom: 0,\n        left: '4vw',\n        right: '4vw',\n        borderTop: '2px dashed',\n      }}\n    >\n      <Box pt={2} onClick={() => setIsBottomFiltersOpen(!isBottomFiltersOpen)}>\n        <Text fontWeight=\"bold\">{isBottomFiltersOpen ? 'v Filters v' : '^ Filters ^'}</Text>\n      </Box>\n      <Box width={1} mb={2}>\n        <SearchInput isSmallViewport />\n      </Box>\n      <Flex mb={2} justifyContent=\"space-around\" sx={{ width: '100%' }}>\n        <Views />\n        <SortFields isSmallViewport />\n      </Flex>\n    </Flex>\n  )\n}\n","import React from 'react'\nimport { Box } from 'rebass'\n\nimport Locations from './Locations'\nimport Time from './Time'\nimport Hemispheres from './Hemispheres'\nimport Months from './Months'\n\ninterface IProps {\n  isBottomFiltersOpen: boolean\n}\n\nexport default function BottomFilters({ isBottomFiltersOpen }: IProps) {\n  if (!isBottomFiltersOpen) {\n    return null\n  }\n\n  return (\n    <Box\n      display=\"grid\"\n      p={2}\n      backgroundColor=\"white\"\n      sx={{\n        position: 'absolute',\n        bottom: '108px',\n        left: 2,\n        right: 2,\n        border: '2px dashed black',\n        borderRadius: '2px',\n        gridTemplateColumns: '1fr 1fr',\n        gridTemplateRows: '1fr 1fr',\n        columnGap: 2,\n        rowGap: 2,\n      }}\n    >\n      <Locations />\n      <Time />\n      <Hemispheres />\n      <Months />\n    </Box>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Box } from 'rebass'\n\nimport SearchInput from './SearchInput'\nimport Views from './Views'\nimport Locations from './Locations'\nimport Time from './Time'\nimport Hemispheres from './Hemispheres'\nimport Months from './Months'\nimport SortFields from './SortFields'\nimport Creatures from './Creatures'\nimport Bottom from './Bottom'\nimport BottomFilters from './BottomFilters'\n\nimport './App.css'\n\nconst AppContainer = ({ children }: { children: React.ReactNode }) => (\n  <Box\n    display=\"grid\"\n    width={1}\n    height=\"100%\"\n    px=\"4vw\"\n    py=\"2vh\"\n    overflow=\"hidden\"\n    sx={{\n      gridTemplateRows: 'repeat(3, auto)',\n      gridTemplateAreas: \"'top' 'filters' 'content'\",\n      rowGap: 16,\n      columnGap: 24,\n      '@media (max-width: 600px)': {\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'relative',\n      },\n    }}\n  >\n    {children}\n  </Box>\n)\n\nconst Top = ({ children }: { children: React.ReactNode }) => (\n  <Box\n    display=\"grid\"\n    sx={{\n      gridArea: 'top',\n      gridTemplateColumns: 'repeat(3, 1fr)',\n      columnGap: 4,\n    }}\n  >\n    {children}\n  </Box>\n)\n\nconst Filters = ({ children }: { children: React.ReactNode }) => (\n  <Box\n    display=\"grid\"\n    sx={{\n      gridArea: 'filters',\n      gridTemplateColumns: 'repeat(4, 1fr)',\n      columnGap: 24,\n      '@media (max-width: 600px)': {\n        display: 'unset',\n      },\n    }}\n  >\n    {children}\n  </Box>\n)\n\nconst Content = ({ children }: { children: React.ReactNode }) => (\n  <Box\n    overflow=\"auto\"\n    sx={{\n      gridArea: 'content',\n      '@media (max-width: 600px)': {\n        height: 'calc(100% - 108px)',\n      },\n    }}\n  >\n    {children}\n  </Box>\n)\n\nexport default function App() {\n  const [isSmallViewport, setIsSmallViewport] = useState(window.innerWidth <= 600)\n  const [isBottomFiltersOpen, setIsBottomFiltersOpen] = useState(false)\n\n  const handleResize = () => {\n    setIsSmallViewport(window.innerWidth <= 600)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize)\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  })\n\n  return (\n    <AppContainer>\n      {!isSmallViewport && (\n        <>\n          <Top>\n            <SearchInput />\n            <Views />\n            <SortFields />\n          </Top>\n          <Filters>\n            <Locations />\n            <Time />\n            <Hemispheres />\n            <Months />\n          </Filters>\n        </>\n      )}\n      <Content>\n        <Creatures />\n      </Content>\n      <Bottom\n        isBottomFiltersOpen={isBottomFiltersOpen}\n        isSmallViewport={isSmallViewport}\n        setIsBottomFiltersOpen={setIsBottomFiltersOpen}\n      />\n      <BottomFilters isBottomFiltersOpen={isBottomFiltersOpen} />\n    </AppContainer>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { SearchInputContextProvider } from './search-input-context'\nimport { ListViewContextProvider } from './list-view-context'\nimport { LocationsContextProvider } from './locations-context'\nimport { TimeContextProvider } from './time-context'\nimport { HemispheresContextProvider } from './hemispheres-context'\nimport { MonthsContextProvider } from './months-context'\nimport { SortFieldContextProvider } from './sort-field-context'\n\nReactDOM.render(\n  <React.StrictMode>\n    <SearchInputContextProvider>\n      <LocationsContextProvider>\n        <TimeContextProvider>\n          <HemispheresContextProvider>\n            <MonthsContextProvider>\n              <SortFieldContextProvider>\n                <ListViewContextProvider>\n                  <App />\n                </ListViewContextProvider>\n              </SortFieldContextProvider>\n            </MonthsContextProvider>\n          </HemispheresContextProvider>\n        </TimeContextProvider>\n      </LocationsContextProvider>\n    </SearchInputContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}