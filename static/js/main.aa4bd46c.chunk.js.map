{"version":3,"sources":["types.ts","helpers.ts","SearchField.tsx","Views.tsx","CreaturesTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ListView","SortDirection","SortField","compareString","a","b","SearchFieldContainer","styled","div","SearchField","search","type","onChange","ViewsContainer","Views","changeListView","currentListView","value","Bugs","checked","Fish","emojiMap","Ascending","Descending","header","css","Grid","IdHeader","NameHeader","PriceHeader","Rows","numRows","Row","Id","Name","Price","CreaturesTable","creatures","idSortDirection","nameSortDirection","priceSortDirection","sort","onClick","NotApplicable","role","aria-label","Object","entries","length","values","map","creatureInfo","key","id","name","price","AppContainer","App","props","event","setState","listView","target","newValue","state","origCreatures","bugs","fish","filtered","filter","creatureEntry","j","n","m","i","isSubsequence","toLowerCase","listUpdate","fromEntries","searchInput","field","shouldSortAscending","sorted","stateUpdates","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa4bd46c.chunk.js","sourcesContent":["export enum ListView {\n  Bugs = 'bugs',\n  Fish = 'fish',\n}\n\nexport enum SortDirection {\n  Ascending = 'ASC',\n  Descending = 'DESC',\n  NotApplicable = 'NOT_APPLICABLE',\n}\n\nexport enum SortField {\n  Id = 'id',\n  Name = 'name',\n  Price = 'price',\n}\n\nexport interface ICreature {\n  id: number\n  name: { [key: string]: string }\n  price: string\n}\n","export function compareString(a: string, b: string): number {\n  return a > b ? 1 : -1\n}\n\n/**\n * Find if b is a subsequence of a\n * eg. isSubsequence('abcde', 'ace') => true, isSubsequence('abcde', 'abf') => false\n */\nexport function isSubsequence(a: string, b: string): boolean {\n  let j = 0\n  let [n, m] = [a.length, b.length]\n  for (let i = 0; i < n && j < m; i++) {\n    if (a[i] === b[j]) {\n      j++\n    }\n  }\n  return j === m\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface IProps {\n  search: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchFieldContainer = styled.div`\n  display: flex;\n  white-space: pre;\n`\n\nexport default function SearchField({ search }: IProps) {\n  return (\n    <SearchFieldContainer>\n      <label>Search: </label>\n      <input type=\"text\" onChange={search} />\n    </SearchFieldContainer>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { ListView } from './types'\n\ninterface IProps {\n  changeListView: (event: React.ChangeEvent<HTMLInputElement>) => void\n  currentListView: ListView\n}\n\nconst ViewsContainer = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport default function Views({ changeListView, currentListView }: IProps) {\n  return (\n    <ViewsContainer>\n      <p>View: </p>\n      <div>\n        <input\n          type=\"radio\"\n          onChange={changeListView}\n          value={ListView.Bugs}\n          checked={currentListView === ListView.Bugs}\n        />\n        <label>Bugs</label>\n      </div>\n      <div>\n        <input\n          type=\"radio\"\n          onChange={changeListView}\n          value={ListView.Fish}\n          checked={currentListView === ListView.Fish}\n        />\n        <label>Fish</label>\n      </div>\n    </ViewsContainer>\n  )\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { ICreature, SortDirection, SortField } from './types'\n\ninterface IProps {\n  creatures: ICreature[]\n  idSortDirection: SortDirection\n  nameSortDirection: SortDirection\n  priceSortDirection: SortDirection\n  sort: (sortField: SortField) => void\n}\n\ninterface IRowsProps {\n  readonly numRows: number\n}\n\nconst emojiMap = {\n  [SortDirection.Ascending]: '⬇️',\n  [SortDirection.Descending]: '⬆️',\n}\n\nconst header = css`\n  cursor: pointer;\n  font-weight: bold;\n\n  &:hover {\n    color: gray;\n  }\n`\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 48px 3fr 1fr;\n  grid-template-rows: auto 1fr;\n  grid-template-areas:\n    'idHeader nameHeader priceHeader'\n    'main main main';\n  row-gap: 8px;\n`\n\nconst IdHeader = styled.div`\n  ${header}\n  grid-area: idHeader;\n  /* justify-self: end; */\n`\n\nconst NameHeader = styled.div`\n  ${header}\n  grid-area: nameHeader;\n  justify-self: center;\n`\n\nconst PriceHeader = styled.div`\n  ${header}\n  grid-area: priceHeader;\n  justify-self: end;\n`\n\nconst Rows = styled.div<IRowsProps>`\n  grid-area: main;\n  display: grid;\n  grid-template-columns: 48px 1fr 1fr;\n  grid-template-rows: ${({ numRows }) => `repeat(${numRows}, min-content)`};\n  row-gap: 8px;\n  height: calc(100vh - 200px);\n  overflow: auto;\n`\n\nconst Row = styled.div`\n  grid-column: span 3;\n  display: grid;\n  grid-template-columns: 48px 3fr 1fr;\n`\n\nconst Id = styled.div`\n  grid-column: 1 / 2;\n  /* justify-self: center; */\n`\n\nconst Name = styled.div`\n  grid-column: 2 / 3;\n  justify-self: center;\n  /* text-align: center; */\n`\n\nconst Price = styled.div`\n  grid-column: 3 / 4;\n  justify-self: end;\n`\n\nexport default function CreaturesTable({\n  creatures,\n  idSortDirection,\n  nameSortDirection,\n  priceSortDirection,\n  sort,\n}: IProps) {\n  return (\n    <Grid>\n      <IdHeader onClick={() => sort(SortField.Id)}>\n        Id\n        {idSortDirection !== SortDirection.NotApplicable && (\n          <span role=\"img\" aria-label=\"up\">\n            {emojiMap[idSortDirection]}\n          </span>\n        )}\n      </IdHeader>\n      <NameHeader onClick={() => sort(SortField.Name)}>\n        Name\n        {nameSortDirection !== SortDirection.NotApplicable && (\n          <span role=\"img\" aria-label=\"up\">\n            {emojiMap[nameSortDirection]}\n          </span>\n        )}\n      </NameHeader>\n      <PriceHeader onClick={() => sort(SortField.Price)}>\n        Price\n        {priceSortDirection !== SortDirection.NotApplicable && (\n          <span role=\"img\" aria-label=\"up\">\n            {emojiMap[priceSortDirection]}\n          </span>\n        )}\n      </PriceHeader>\n      {/* <td onClick={() => this.sort(SortField.Price)}>CJ Price</td> */}\n      <Rows numRows={Object.entries(creatures).length}>\n        {Object.values(creatures).map((creatureInfo) => (\n          <Row key={creatureInfo.id}>\n            <Id>{creatureInfo.id}</Id>\n            <Name>{creatureInfo.name['name-en']}</Name>\n            <Price>{creatureInfo.price}</Price>\n            {/* <td>{creatureInfo['price-cj']}</td> */}\n          </Row>\n        ))}\n      </Rows>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport bugs from './bugs.json'\nimport fish from './fish.json'\n\nimport { ListView, SortDirection, SortField } from './types'\nimport { compareString, isSubsequence } from './helpers'\n\nimport SearchField from './SearchField'\nimport Views from './Views'\nimport CreaturesTable from './CreaturesTable'\n\nimport './App.css'\n\ninterface IState {\n  // data\n  bugs: object\n  fish: object\n\n  // list view\n  listView: ListView\n\n  // search\n  searchInput: String\n\n  // sort directions\n  id: SortDirection\n  name: SortDirection\n  price: SortDirection\n}\n\nconst AppContainer = styled.div`\n  width: 100%;\n  max-width: 800px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > * {\n    width: 100%;\n  }\n`\n\nexport default class App extends React.Component<{}, IState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      bugs,\n      fish,\n      listView: ListView.Bugs,\n      searchInput: '',\n      id: SortDirection.Ascending,\n      name: SortDirection.NotApplicable,\n      price: SortDirection.NotApplicable,\n    }\n  }\n\n  get creatures(): object {\n    return this.state[this.state.listView]\n  }\n\n  changeListView = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      listView: event.target.value as ListView,\n    })\n  }\n\n  search = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value\n    const { listView } = this.state\n\n    if (newValue) {\n      const origCreatures = listView === 'bugs' ? bugs : fish\n      const filtered = Object.entries(origCreatures).filter((creatureEntry) =>\n        isSubsequence(creatureEntry[1].name['name-en'].toLowerCase(), newValue.toLowerCase())\n      )\n      const listUpdate = { [listView]: Object.fromEntries(filtered) }\n      this.setState({\n        ...listUpdate,\n        searchInput: newValue,\n      })\n    } else {\n      switch (listView) {\n        case ListView.Bugs:\n          this.setState({ bugs })\n          break\n        case ListView.Fish:\n          this.setState({ fish })\n          break\n      }\n    }\n  }\n\n  sort = (field: SortField) => {\n    const shouldSortAscending =\n      this.state[field] === SortDirection.Descending ||\n      this.state[field] === SortDirection.NotApplicable\n\n    let sorted = []\n    let stateUpdates = {}\n    switch (field) {\n      case SortField.Id:\n        sorted = Object.entries(this.creatures).sort((a: any, b: any) =>\n          shouldSortAscending ? a[1].id - b[1].id : b[1].id - a[1].id\n        )\n        stateUpdates = {\n          id: shouldSortAscending ? SortDirection.Ascending : SortDirection.Descending,\n          name: SortDirection.NotApplicable,\n          price: SortDirection.NotApplicable,\n        }\n        break\n      case SortField.Name:\n        sorted = Object.entries(this.creatures).sort((a: any, b: any) =>\n          shouldSortAscending ? compareString(a[0], b[0]) : compareString(b[0], a[0])\n        )\n        stateUpdates = {\n          id: SortDirection.NotApplicable,\n          name: shouldSortAscending ? SortDirection.Ascending : SortDirection.Descending,\n          price: SortDirection.NotApplicable,\n        }\n        break\n      case SortField.Price:\n        sorted = Object.entries(this.creatures).sort((a: any, b: any) =>\n          shouldSortAscending ? a[1].price - b[1].price : b[1].price - a[1].price\n        )\n        stateUpdates = {\n          id: SortDirection.NotApplicable,\n          name: SortDirection.NotApplicable,\n          price: shouldSortAscending ? SortDirection.Ascending : SortDirection.Descending,\n        }\n    }\n\n    this.setState({\n      [this.state.listView]: Object.fromEntries(sorted),\n      ...stateUpdates,\n    })\n  }\n\n  render() {\n    const { id, listView, name, price } = this.state\n\n    return (\n      <AppContainer>\n        <div>\n          <SearchField search={this.search} />\n          <Views changeListView={this.changeListView} currentListView={listView} />\n        </div>\n        <CreaturesTable\n          creatures={Object.values(this.creatures)}\n          sort={this.sort}\n          idSortDirection={id}\n          nameSortDirection={name}\n          priceSortDirection={price}\n        />\n      </AppContainer>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}